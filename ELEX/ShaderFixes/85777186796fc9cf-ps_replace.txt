// Decals - cracks
Texture2D<float4> t29 : register(t29);

Texture2D<float4> t28 : register(t28);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t0 : register(t0);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

cbuffer cb1 : register(b1)
{
  float4 cb1[2560];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

// Copied in with 3Dmigoto
cbuffer _CommonMatrices : register(b3)
{
  float4x4 m_matViewProjection;
  float4x4 m_matInvProjection;
  float4x4 m_matProjection;
  float4x4 m_matView;
  float4x4 m_matCameraViewProjection;
  float4x4 m_matCameraProjection;
  float4 m_frustumPlanes[6];
  float3 m_vecCamPos;
  float m_fFar;
  float3 m_vecWorldCamPos;
  float m_fRcpFar;
  float3 m_vecRenderOffset;
  float m_fNear;
  float3 m_vecCamDir;
  float m_fExposure;
  float2 m_vecViewPortSize;
  float2 m_vecRcpViewPortSize;
  float2 m_vecDistortionScale;
  float m_fFoV;
  float _padding0;
  float m_fCamAzimuth;
  float m_fTime;
  float m_fFrameTime;
  float m_fAdaptiveTessellationFactor;
  float2 m_vecMiePhaseConstants;
  float m_fOceanWaterLevel;
  float m_fRenderOffsetOceanWaterLevel;
  float4 m_vecOceanColorAndOpacity;
  float2 m_vecOceanTexCoordScale;
  float2 m_vecRcpOceanTexCoordScale;
  float m_fWeatherTemperature;
  float2 m_vecZToDepth;
  float _padding1;
  float3 m_vecSunDir;
  float _padding2;
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float3 v0 : WORLDPOS0,
  nointerpolation uint v1 : DOMAINDATA0,
  float4 v2 : SV_Position0,
  uint v3 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o4 : SV_Target4)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (uint2)v2.xy;
  r0.zw = float2(0,0);
  r1.x = t0.Load(r0.xyw).x;
  r1.y = (int)v1.x * 10;
  r2.z = 1 / r1.x;
  r2.xy = v2.xy;
  r2.w = 1;

float4 stereo = StereoParams.Load(0);
float4 tmp1, tmp2;

// Fix clipping, needs one fudge constant, save unfixed r2 for use later
tmp2 = r2;
r2.x -= stereo.x * (r1.x - stereo.y / m_fFar)/r1.x * 9.35e2 * m_matInvProjection._m00;

  r3.x = dot(r2.xyzw, cb1[r1.y+4].xyzw);
  r3.y = dot(r2.xyzw, cb1[r1.y+5].xyzw);
  r3.z = dot(r2.xyzw, cb1[r1.y+6].xyzw);
  r1.z = dot(r2.xyzw, cb1[r1.y+7].xyzw);
  r2.xyz = r3.xyz / r1.zzz;
  r3.xy = r2.xy * cb1[r1.y+8].xy + cb1[r1.y+8].zw;
  r3.z = r2.z;
  r4.xyz = saturate(r3.xyz);
  r3.xyw = cmp(r3.xyz != r4.xyz);
  r1.z = (int)r3.y | (int)r3.x;
  r1.z = (int)r3.w | (int)r1.z;
  if (r1.z != 0) discard;

// Calculate transformed unfixed r2.
tmp1.x = dot(tmp2.xyzw, cb1[r1.y+4].xyzw);
tmp1.y = dot(tmp2.xyzw, cb1[r1.y+5].xyzw);
tmp1.z = dot(tmp2.xyzw, cb1[r1.y+6].xyzw);
tmp1.w = dot(tmp2.xyzw, cb1[r1.y+7].xyzw);
tmp1.xyz = tmp1.xyz / tmp1.www;

// Fixed transformed r2 is required later to fix texcoord.
tmp2 = r2;

// Unfix transformed r2 to avoid texture blur in code below.
r2.xyz = tmp1.xyz;

  r0.xyz = t2.Load(r0.xyz).xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r4.x = cb1[r1.y+0].x;
  r4.y = cb1[r1.y+1].x;
  r4.z = cb1[r1.y+2].x;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyw = r4.xyz * r0.www;
  r4.x = cb1[r1.y+0].y;
  r4.y = cb1[r1.y+1].y;
  r4.z = cb1[r1.y+2].y;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r5.x = -cb1[r1.y+0].z;
  r5.y = -cb1[r1.y+1].z;
  r5.z = -cb1[r1.y+2].z;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r0.x = saturate(dot(r0.xyz, r5.xyz));
  r0.x = cb1[r1.y+9].w * r0.x;
  r0.y = saturate(-r3.z * 2 + 2);
  r0.x = r0.x * r0.y;
  r6.xy = (int2)v2.xy;
  r6.zw = float2(0,0);
  r7.z = t0.Load(r6.xyw, int3(0, 0, 0)).x;
  r8.z = t0.Load(r6.xyw, int3(0, 0, 0)).x;
  r0.y = r7.z + -r1.x;
  r0.z = r8.z + -r1.x;
  r0.y = cmp(abs(r0.y) < abs(r0.z));
  r9.xyzw = trunc(v2.xyxy);
  r9.xyzw = float4(-1,0,1,0) + r9.xyzw;
  r7.xy = r9.xy;
  r8.xy = r9.zw;
  r9.xyz = r0.yyy ? r7.xyz : r8.xyz;
  r9.z = 1 / r9.z;
  r9.w = 1;
  r10.x = dot(r9.xyzw, cb1[r1.y+4].xyzw);
  r10.y = dot(r9.xyzw, cb1[r1.y+5].xyzw);
  r0.y = dot(r9.xyzw, cb1[r1.y+7].xyzw);
  r0.yz = r10.xy / r0.yy;
  r0.yz = r2.xy + -r0.yz;
  r7.w = t0.Load(r6.xyw, int3(0, 0, 0)).x;
  r8.w = t0.Load(r6.xyz, int3(0, 0, 0)).x;
  r0.w = r7.w + -r1.x;
  r1.x = r8.w + -r1.x;
  r0.w = cmp(abs(r0.w) < abs(r1.x));
  r6.xyz = r0.www ? r7.xyw : r8.xyw;
  r6.z = 1 / r6.z;
  r6.w = 1;
  r7.x = dot(r6.xyzw, cb1[r1.y+4].xyzw);
  r7.y = dot(r6.xyzw, cb1[r1.y+5].xyzw);
  r0.w = dot(r6.xyzw, cb1[r1.y+7].xyzw);
  r1.xy = r7.xy / r0.ww;
  r1.xy = r2.xy + -r1.xy;

// Adjust texcoord
r2.xy = tmp2.xy;

  r0.w = t28.SampleGrad(s6_s, r2.xy, r0.y, r1.x).x;
  r0.yz = t29.SampleGrad(s7_s, r2.xy, r0.zy, r1.yx).xy;
  r0.yz = r0.yz * float2(4,4) + float2(-2,-2);
  r1.x = dot(r0.yz, r0.yz);
  r1.xy = -r1.xx * float2(0.25,0.5) + float2(1,1);
  r1.x = sqrt(r1.x);
  r0.yz = r1.xx * r0.yz;
  o2.x = saturate(cb2[0].x);
  r1.xzw = r0.zzz * r4.xyz;
  r1.xzw = r0.yyy * r3.xyw + r1.xzw;
  r1.xyz = r1.yyy * r5.xyz + r1.xzw;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = rsqrt(r0.y);
  r1.xyz = r1.xyz * r0.yyy;
  r0.x = r0.w * r0.x;
  o1.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.xyz = cb2[3].xyz;
  o0.w = r0.x;
  o1.w = r0.x;
  o2.y = cb2[1].x;
  o2.z = cb2[2].x;
  o2.w = r0.x;
  o4.xyz = float3(0,0,0);
  o4.w = r0.x;
//o0.zw += 1;
  return;
}
