// HUD 1 (main and crosshair)

cbuffer para : register(b0)
{
  float4 world0 : packoffset(c0);
  float4 world1 : packoffset(c1);
  float4 x_off : packoffset(c2);
  float4 texgen_s : packoffset(c3);
  float4 texgen_t : packoffset(c4);
  float4 x3d : packoffset(c5);
  float4 y3d : packoffset(c6);
  float4 w3d : packoffset(c7);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

// Copied in with 3Dmigoto
cbuffer _CommonMatrices : register(b13)
{
    float4x4 m_matViewProjection;
    float4x4 m_matInvProjection;
    float4x4 m_matProjection;
    float4x4 m_matView;
    float4x4 m_matCameraViewProjection;
    float4x4 m_matCameraProjection;
    float4x4 m_matPrevViewProjection;
    float4 m_frustumPlanes[6];
    float3 m_vecCamPos;
    float m_fFar;
    float3 m_vecWorldCamPos;
    float m_fRcpFar;
    float3 m_vecRenderOffset;
    float m_fNear;
    float3 m_vecCamDir;
    float m_fExposure;
    float2 m_vecViewPortSize;
    float2 m_vecRcpViewPortSize;
    float2 m_vecDistortionScale;
    float m_fFoV;
    float _padding0;
    float m_fCamAzimuth;
    float m_fTime;
    float m_fFrameTime;
    float m_fAdaptiveTessellationFactor;
    float2 m_vecMiePhaseConstants;
    float m_fOceanWaterLevel;
    float m_fRenderOffsetOceanWaterLevel;
    float4 m_vecOceanColorAndOpacity;
    float2 m_vecOceanTexCoordScale;
    float2 m_vecRcpOceanTexCoordScale;
    float m_fWeatherTemperature;
    float2 m_vecZToDepth;
    uint _padding1;
    float3 m_vecSunDir;
    float _padding2;
    float4 m_vecGradiantAdjust;
}

// Depth buffer copied to this input with 3Dmigoto:
Texture2D<float> DepthBuffer : register(t110);
#include "auto-crosshair.hlsl"

void main(
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v0.xyzw, world1.xyzw);
  r0.xyz = y3d.xyz * r0.xxx;
  r0.w = dot(v0.xyzw, world0.xyzw);
  r0.xyz = r0.www * x3d.xyz + r0.xyz;
  r0.xyz = w3d.xyz + r0.xyz;
  r0.z = 1 / r0.z;
  o0.xy = r0.xy * r0.zz;
  o0.z = world0.z;
  o0.w = 1;

float4 filter = IniParams.Load(int2(2,0));
if(filter.x == 0)
{
  float4 stereo = StereoParams.Load(0);
  float4 params = IniParams.Load(0);

  // Detect crosshair
  if(filter.y == 1)
  {
    if(o0.x > -0.15 && o0.x < 0.15 && o0.y > -0.15 && o0.y < 0.15)
    {
      o0.x += adjust_from_depth_buffer(0, 0);
    }
    else
    {
      o0.x += stereo.x * params.x;
    }
  }
  else
  {
    o0.x += stereo.x * params.x;
  }
}

  o1.xy = v1.xy * r0.zz;
  o1.w = r0.z;
  o1.z = 1;
  return;
}
