// Inside shadows when looking into sun through objects

cbuffer _Globals : register(b0)
{
  float3 LightDir : packoffset(c0);
  float4x4 ShadowVolumeTransform : packoffset(c1);
  float4 Unproject : packoffset(c5);
  float4x4 EyeToLightSpace : packoffset(c6);
  float2 CascadeShadowSettings : packoffset(c10);
  float CascadeIndex : packoffset(c10.z);
  float CascadeShadowMapSize : packoffset(c10.w);
  float2 RcpDeferredShadowMapSize : packoffset(c11);
}

// Copied in with 3Dmigoto
cbuffer _CommonMatrices : register(b1)
{
  float4x4 m_matViewProjection;
  float4x4 m_matInvProjection;
  float4x4 m_matProjection;
  float4x4 m_matView;
  float4x4 m_matCameraViewProjection;
  float4x4 m_matCameraProjection;
  float4 m_frustumPlanes[6];
  float3 m_vecCamPos;
  float m_fFar;
  float3 m_vecWorldCamPos;
  float m_fRcpFar;
  float3 m_vecRenderOffset;
  float m_fNear;
  float3 m_vecCamDir;
  float m_fExposure;
  float2 m_vecViewPortSize;
  float2 m_vecRcpViewPortSize;
  float2 m_vecDistortionScale;
  float m_fFoV;
  float _padding0;
  float m_fCamAzimuth;
  float m_fTime;
  float m_fFrameTime;
  float m_fAdaptiveTessellationFactor;
  float2 m_vecMiePhaseConstants;
  float m_fOceanWaterLevel;
  float m_fRenderOffsetOceanWaterLevel;
  float4 m_vecOceanColorAndOpacity;
  float2 m_vecOceanTexCoordScale;
  float2 m_vecRcpOceanTexCoordScale;
  float m_fWeatherTemperature;
  float2 m_vecZToDepth;
  float _padding1;
  float3 m_vecSunDir;
  float _padding2;
}

SamplerState SmpClampPnt_s : register(s0);
Texture2D<float> LinearDepth : register(t0);
Texture2D<uint4> GBuffer3 : register(t1);
Texture2D<float4> GBuffer4 : register(t2);
Texture2DArray<float> CascadeShadowMap : register(t3);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  out float2 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r0.z = GBuffer4.Load(r0.xyz).w;
  r0.z = 1 + -r0.z;
  r0.z = max(9.99999975e-05, r0.z);
  r0.z = log2(r0.z);
  r1.x = GBuffer3.Load(r0.xyw).w;
  r2.z = LinearDepth.Load(r0.xyw).x;
  r0.x = (int)r1.x & 16;
  r0.x = r0.x ? -1 : r0.z;
  r0.x = CascadeShadowSettings.y * r0.x;
  r0.x = -0.0500000007 * r0.x;
  r0.y = 1 / CascadeShadowMapSize;
  r0.zw = v0.xy * Unproject.xy + Unproject.zw;
  r2.xy = r0.zw * r2.zz;

// Fix shadows
float4 stereo = StereoParams.Load(0);
r2.x -= stereo.x * (r2.z - stereo.y / m_fFar) * m_matInvProjection._m00;

  r2.w = 1;
  r1.x = dot(r2.xyzw, EyeToLightSpace._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, EyeToLightSpace._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, EyeToLightSpace._m02_m12_m22_m32);
  r1.xy = r1.xy * CascadeShadowMapSize + float2(-0.5,-0.5);
  r1.zw = frac(r1.xy);
  r1.xy = r1.xy + -r1.zw;
  r1.xy = float2(0.5,0.5) + r1.xy;
  r2.xy = r1.xy * r0.yy;
  r2.z = CascadeIndex;
  r3.xyzw = CascadeShadowMap.Gather(SmpClampPnt_s, r2.xyz, int2(1, -1)).xyzw;
  r3.xyzw = -r3.wzxy + r0.zzzz;
  r3.xyzw = abs(r3.xyzw) * r0.xxxx;
  r3.xyzw = -r3.xyzw * r3.xyzw;
  r3.xyzw = exp2(r3.xyzw);
  r4.y = r1.z;
  r5.yz = float2(1,1) + -r1.wz;
  r6.xz = r5.yz * r1.zw;
  r4.w = r6.x;
  r5.w = 1;
  r4.xz = r5.wy;
  r0.y = dot(r3.zwxy, r4.xyzw);
  r3.xyzw = CascadeShadowMap.Gather(SmpClampPnt_s, r2.xyz, int2(-1, -1)).xyzw;
  r3.xyzw = -r3.wzxy + r0.zzzz;
  r3.xyzw = abs(r3.xyzw) * r0.xxxx;
  r3.xyzw = -r3.xyzw * r3.xyzw;
  r3.xyzw = exp2(r3.xyzw);
  r5.x = r5.z * r5.y;
  r0.w = dot(r3.xyzw, r5.xyzw);
  r6.xy = r5.zw;
  r0.y = r0.w + r0.y;
  r3.xyzw = CascadeShadowMap.Gather(SmpClampPnt_s, r2.xyz, int2(-1, 1)).xyzw;
  r2.xyzw = CascadeShadowMap.Gather(SmpClampPnt_s, r2.xyz, int2(1, 1)).xyzw;
  r2.xyzw = -r2.wzxy + r0.zzzz;
  r3.xyzw = -r3.wzxy + r0.zzzz;
  r3.xyzw = abs(r3.xyzw) * r0.xxxx;
  r2.xyzw = abs(r2.xyzw) * r0.xxxx;
  r2.xyzw = -r2.xyzw * r2.xyzw;
  r2.xyzw = exp2(r2.xyzw);
  r3.xyzw = -r3.xyzw * r3.xyzw;
  r3.xyzw = exp2(r3.xyzw);
  r6.w = r1.w;
  r4.w = r1.z * r1.w;
  r0.x = dot(r3.xyzw, r6.xyzw);
  r4.z = r6.w;
  r0.z = dot(r2.xyzw, r4.xyzw);
  r0.x = r0.y + r0.x;
  r0.x = r0.x + r0.z;
  o0.y = 0.111111112 * r0.x;
  o0.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.2.66 on Mon Nov 13 11:01:28 2017
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 LightDir;                   // Offset:    0 Size:    12 [unused]
//   float4x4 ShadowVolumeTransform;    // Offset:   16 Size:    64 [unused]
//   float4 Unproject;                  // Offset:   80 Size:    16
//   float4x4 EyeToLightSpace;          // Offset:   96 Size:    64
//   float2 CascadeShadowSettings;      // Offset:  160 Size:     8
//   float CascadeIndex;                // Offset:  168 Size:     4
//   float CascadeShadowMapSize;        // Offset:  172 Size:     4
//   float2 RcpDeferredShadowMapSize;   // Offset:  176 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SmpClampPnt                       sampler      NA          NA    0        1
// LinearDepth                       texture   float          2d    0        1
// GBuffer3                          texture   uint4          2d    1        1
// GBuffer4                          texture  float4          2d    2        1
// CascadeShadowMap                  texture   float     2darray    3        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xy          0   TARGET   float   xy  
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (uint,uint,uint,uint) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2darray (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xy
dcl_temps 7
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t2.xywz
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000100)
log r0.z, r0.z
ld_indexable(texture2d)(uint,uint,uint,uint) r1.x, r0.xyww, t1.wxyz
ld_indexable(texture2d)(float,float,float,float) r2.z, r0.xyww, t0.yzxw
and r0.x, r1.x, l(16)
movc r0.x, r0.x, l(-1.000000), r0.z
mul r0.x, r0.x, cb0[10].y
mul r0.x, r0.x, l(-0.050000)
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[10].w
mad r0.zw, v0.xxxy, cb0[5].xxxy, cb0[5].zzzw
mul r2.xy, r2.zzzz, r0.zwzz
mov r2.w, l(1.000000)
dp4 r1.x, r2.xyzw, cb0[6].xyzw
dp4 r1.y, r2.xyzw, cb0[7].xyzw
dp4 r0.z, r2.xyzw, cb0[8].xyzw
mad r1.xy, r1.xyxx, cb0[10].wwww, l(-0.500000, -0.500000, 0.000000, 0.000000)
frc r1.zw, r1.xxxy
add r1.xy, -r1.zwzz, r1.xyxx
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r2.xy, r0.yyyy, r1.xyxx
mov r2.z, cb0[10].z
gather4_aoffimmi_indexable(1,-1,0)(texture2darray)(float,float,float,float) r3.xyzw, r2.xyzx, t3.xyzw, s0.x
add r3.xyzw, r0.zzzz, -r3.wzxy
mul r3.xyzw, r0.xxxx, |r3.xyzw|
mul r3.xyzw, r3.xyzw, -r3.xyzw
exp r3.xyzw, r3.xyzw
mov r4.y, r1.z
add r5.yz, -r1.wwzw, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r6.xz, r1.zzwz, r5.yyzy
mov r4.w, r6.x
mov r5.w, l(1.000000)
mov r4.xz, r5.wwyw
dp4 r0.y, r3.zwxy, r4.xyzw
gather4_aoffimmi_indexable(-1,-1,0)(texture2darray)(float,float,float,float) r3.xyzw, r2.xyzx, t3.xyzw, s0.x
add r3.xyzw, r0.zzzz, -r3.wzxy
mul r3.xyzw, r0.xxxx, |r3.xyzw|
mul r3.xyzw, r3.xyzw, -r3.xyzw
exp r3.xyzw, r3.xyzw
mul r5.x, r5.y, r5.z
dp4 r0.w, r3.xyzw, r5.xyzw
mov r6.xy, r5.zwzz
add r0.y, r0.y, r0.w
gather4_aoffimmi_indexable(-1,1,0)(texture2darray)(float,float,float,float) r3.xyzw, r2.xyzx, t3.xyzw, s0.x
gather4_aoffimmi_indexable(1,1,0)(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t3.xyzw, s0.x
add r2.xyzw, r0.zzzz, -r2.wzxy
add r3.xyzw, r0.zzzz, -r3.wzxy
mul r3.xyzw, r0.xxxx, |r3.xyzw|
mul r2.xyzw, r0.xxxx, |r2.xyzw|
mul r2.xyzw, r2.xyzw, -r2.xyzw
exp r2.xyzw, r2.xyzw
mul r3.xyzw, r3.xyzw, -r3.xyzw
exp r3.xyzw, r3.xyzw
mov r6.w, r1.w
mul r4.w, r1.w, r1.z
dp4 r0.x, r3.xyzw, r6.xyzw
mov r4.z, r6.w
dp4 r0.z, r2.xyzw, r4.xyzw
add r0.x, r0.x, r0.y
add r0.x, r0.z, r0.x
mul o0.y, r0.x, l(0.111111112)
mov o0.x, l(0)
ret 
// Approximately 66 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
