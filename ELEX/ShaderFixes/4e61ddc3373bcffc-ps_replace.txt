// Decals - wet spots
Texture2D<float4> t28 : register(t28);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

cbuffer cb1 : register(b1)
{
  float4 cb1[2560];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[1];
}

// Copied in with 3Dmigoto
cbuffer _CommonMatrices : register(b3)
{
  float4x4 m_matViewProjection;
  float4x4 m_matInvProjection;
  float4x4 m_matProjection;
  float4x4 m_matView;
  float4x4 m_matCameraViewProjection;
  float4x4 m_matCameraProjection;
  float4 m_frustumPlanes[6];
  float3 m_vecCamPos;
  float m_fFar;
  float3 m_vecWorldCamPos;
  float m_fRcpFar;
  float3 m_vecRenderOffset;
  float m_fNear;
  float3 m_vecCamDir;
  float m_fExposure;
  float2 m_vecViewPortSize;
  float2 m_vecRcpViewPortSize;
  float2 m_vecDistortionScale;
  float m_fFoV;
  float _padding0;
  float m_fCamAzimuth;
  float m_fTime;
  float m_fFrameTime;
  float m_fAdaptiveTessellationFactor;
  float2 m_vecMiePhaseConstants;
  float m_fOceanWaterLevel;
  float m_fRenderOffsetOceanWaterLevel;
  float4 m_vecOceanColorAndOpacity;
  float2 m_vecOceanTexCoordScale;
  float2 m_vecRcpOceanTexCoordScale;
  float m_fWeatherTemperature;
  float2 m_vecZToDepth;
  float _padding1;
  float3 m_vecSunDir;
  float _padding2;
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float3 v0 : WORLDPOS0,
  nointerpolation uint v1 : DOMAINDATA0,
  float4 v2 : SV_Position0,
  uint v3 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (uint2)v2.xy;
  r0.zw = float2(0,0);
  r1.x = t0.Load(r0.xyw).x;
  r1.y = (int)v1.x * 10;
  r2.z = 1 / r1.x;
  r2.xy = v2.xy;
  r2.w = 1;

float4 stereo = StereoParams.Load(0);
stereo.w = IniParams.Load(int2(1,0)).x / 2;
float4 tmp1, tmp2;

// Fix clipping, save unfixed r2 for use later, independent of FoV !
tmp2 = r2;
r2.x -= stereo.x * (r1.x - stereo.y / m_fFar)/r1.x * stereo.w;

  r3.x = dot(r2.xyzw, cb1[r1.y+4].xyzw);
  r3.y = dot(r2.xyzw, cb1[r1.y+5].xyzw);
  r3.z = dot(r2.xyzw, cb1[r1.y+6].xyzw);
  r1.z = dot(r2.xyzw, cb1[r1.y+7].xyzw);
  r2.xyz = r3.xyz / r1.zzz;
  r3.xy = r2.xy * cb1[r1.y+8].xy + cb1[r1.y+8].zw;
  r3.z = r2.z;
  r4.xyz = saturate(r3.xyz);
  r3.xyz = cmp(r3.xyz != r4.xyz);
  r1.z = (int)r3.y | (int)r3.x;
  r1.z = (int)r3.z | (int)r1.z;
  if (r1.z != 0) discard;

// Calculate transformed unfixed r2.
tmp1.x = dot(tmp2.xyzw, cb1[r1.y+4].xyzw);
tmp1.y = dot(tmp2.xyzw, cb1[r1.y+5].xyzw);
tmp1.z = dot(tmp2.xyzw, cb1[r1.y+6].xyzw);
tmp1.w = dot(tmp2.xyzw, cb1[r1.y+7].xyzw);
tmp1.xyz = tmp1.xyz / tmp1.www;

// Fixed transformed r2 is required later to fix texcoord.
tmp2 = r2;

// Unfix transformed r2 to avoid texture blur in code below.
r2.xyz = tmp1.xyz;

  r0.xyz = t2.Load(r0.xyz).xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r3.x = -cb1[r1.y+0].z;
  r3.y = -cb1[r1.y+1].z;
  r3.z = -cb1[r1.y+2].z;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.x = saturate(dot(r0.xyz, r3.xyz));
  r0.x = cb1[r1.y+9].w * r0.x;
  r3.xy = (int2)v2.xy;
  r3.zw = float2(0,0);
  r4.z = t0.Load(r3.xyw, int3(0, 0, 0)).x;
  r5.z = t0.Load(r3.xyw, int3(0, 0, 0)).x;
  r0.y = r4.z + -r1.x;
  r0.z = r5.z + -r1.x;
  r0.y = cmp(abs(r0.y) < abs(r0.z));
  r6.xyzw = trunc(v2.xyxy);
  r6.xyzw = float4(-1,0,1,0) + r6.xyzw;
  r4.xy = r6.xy;
  r5.xy = r6.zw;
  r6.xyz = r0.yyy ? r4.xyz : r5.xyz;
  r6.z = 1 / r6.z;
  r6.w = 1;
  r7.x = dot(r6.xyzw, cb1[r1.y+4].xyzw);
  r7.y = dot(r6.xyzw, cb1[r1.y+5].xyzw);
  r0.y = dot(r6.xyzw, cb1[r1.y+7].xyzw);
  r0.yz = r7.xy / r0.yy;
  r0.yz = r2.xy + -r0.yz;
  r4.w = t0.Load(r3.xyw, int3(0, 0, 0)).x;
  r5.w = t0.Load(r3.xyz, int3(0, 0, 0)).x;
  r0.w = r4.w + -r1.x;
  r1.x = r5.w + -r1.x;
  r0.w = cmp(abs(r0.w) < abs(r1.x));
  r3.xyz = r0.www ? r4.xyw : r5.xyw;
  r3.z = 1 / r3.z;
  r3.w = 1;
  r4.x = dot(r3.xyzw, cb1[r1.y+4].xyzw);
  r4.y = dot(r3.xyzw, cb1[r1.y+5].xyzw);
  r0.w = dot(r3.xyzw, cb1[r1.y+7].xyzw);
  r1.xy = r4.xy / r0.ww;
  r1.xy = r2.xy + -r1.xy;

// Adjust texcoord
r2.xy = tmp2.xy;

  r0.y = t28.SampleGrad(s6_s, r2.xy, r0.z, r1.y).x;
  r0.y = cb2[0].x * r0.y;
  r0.z = r0.x * r0.y;
  r0.z = saturate(2.85714293 * r0.z);
  o0.xyz = r0.zzz * float3(-0.649999976,-0.649999976,-0.649999976) + float3(1,1,1);
  r0.xy = r0.xx * r0.yy + float2(-0.449999988,-0.200000003);
  o1.w = saturate(r0.x + r0.x);
  o2.w = saturate(1.25 * r0.y);
  o0.w = 0;
  o1.xyz = float3(0.5,1,0.5);
  o2.xyz = float3(0.100000001,0.354000002,0);
  return;
}
