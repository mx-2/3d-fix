// Ambient Occlusion blur

cbuffer _Globals : register(b0)
{
  int FrameNumber : packoffset(c0);
  float2 RcpTextureSize : packoffset(c0.y);
  float2 TextureSize : packoffset(c1);
  float4 Unproject : packoffset(c2);
  float Far : packoffset(c3);
  float AOIntensity : packoffset(c3.y);
  float4x4 ReprojectView : packoffset(c4);
  float4x4 View : packoffset(c8);
}

SamplerState SmpClampPnt_s : register(s0);
SamplerState SmpClampLin_s : register(s1);
Texture2D<float2> AmbientOcclusion : register(t0);
Texture2D<float2> PrevAmbientOcclusion : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float2 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = 1;
  r1.xy = v1.xy * Unproject.xy + Unproject.zw;
  r1.zw = AmbientOcclusion.SampleLevel(SmpClampPnt_s, v1.xy, 0).xy;
  r0.z = Far * r1.w;
  r0.xy = r1.xy * r0.zz;
  r1.x = dot(r0.xyzw, ReprojectView._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, ReprojectView._m01_m11_m21_m31);
  r0.x = dot(r0.xyzw, ReprojectView._m03_m13_m23_m33);
  r0.yz = r1.xy / r0.xx;
  r0.x = r0.x / Far;
  r1.xy = r0.yz * float2(0.5,-0.5) + float2(0.5,0.5);
  r0.yz = cmp(abs(r0.yz) >= float2(1,1));
  r0.y = (int)r0.z | (int)r0.y;
  r0.zw = r1.xy * TextureSize.xy + float2(-0.5,-0.5);
  r1.xy = frac(r0.wz);
  r0.zw = -r1.yx + r0.zw;
  r0.zw = float2(0.5,0.5) + r0.zw;
  r0.zw = RcpTextureSize.xy * r0.zw;

float4 params = IniParams.Load(0);
if(params.y == 1.0)
{
  r2.xyzw = PrevAmbientOcclusion.Gather(SmpClampPnt_s, r0.zw).xyzw;
  r3.xyzw = PrevAmbientOcclusion.Gather(SmpClampPnt_s, r0.zw).xyzw;
}
else
{
  r2.xyzw = 1;
  r3.xyzw = 1;
}
  r2.xyzw = r2.xyzw / r0.xxxx;
  r2.xyzw = float4(1,1,1,1) + -r2.xyzw;
  r2.xyzw = float4(16,16,16,16) * r2.xyzw;
  r2.xyzw = float4(1,1,1,1) + -abs(r2.xyzw);
  r2.xyzw = max(float4(0,0,0,0), r2.xyzw);
  r0.xz = float2(1,1) + -r1.yx;
  r4.xz = r0.xz * r1.xy;
  r4.w = r0.x * r0.z;
  r4.y = r1.y * r1.x;
  r2.xyzw = r4.xyzw * r2.xyzw;
  r0.x = dot(r3.xyzw, r2.xyzw);
  r0.z = dot(r2.xyzw, float4(1,1,1,1));
  r0.x = r0.x / r0.z;
  r0.w = cmp(0 < r0.z);
  r0.z = 0.875 * r0.z;
  r0.y = r0.y ? 0 : r0.z;
  r0.x = r0.w ? r0.x : r1.z;
  r2.x = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(-1, -1)).x;
  r2.y = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(0, -1)).x;
  r2.z = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(1, -1)).x;
  r2.w = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(-1, 0)).x;
  r3.x = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(1, 0)).x;
  r3.y = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(-1, 1)).x;
  r3.z = AmbientOcclusion.SampleLevel(SmpClampLin_s, v1.xy, 0, int2(0, 1)).x;
  r3.w = AmbientOcclusion.SampleLevel(SmpClampPnt_s, v1.xy, 0, int2(1, 1)).x;
  r4.xyzw = min(r3.xyzw, r2.xyzw);
  r2.xyzw = max(r3.xyzw, r2.xyzw);
  r0.zw = max(r2.xy, r2.zw);
  r0.z = max(r0.z, r0.w);
  r0.z = max(r0.z, r1.z);
  r1.xy = min(r4.xy, r4.zw);
  r0.w = min(r1.x, r1.y);
  r0.w = min(r0.w, r1.z);
  r1.x = r0.z + -r0.w;
  r0.w = -r1.x * 0.5 + r0.w;
  r0.z = r1.x * 0.5 + r0.z;
  r0.x = max(r0.x, r0.w);
  r0.x = min(r0.x, r0.z);
  r0.x = r0.x + -r1.z;
  o0.x = r0.y * r0.x + r1.z;
  o0.y = r1.w;
  return;
}
