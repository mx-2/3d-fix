// VolumeFogColorAndDensity part 1
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 HaltonSample;               // Offset:    0 Size:    16
//   float4 FogSettings;                // Offset:   16 Size:    16
//   float RcpFogExtinction;            // Offset:   32 Size:     4 [unused]
//   float DustDensity;                 // Offset:   36 Size:     4
//   float GroundFogNoiseIntensity;     // Offset:   40 Size:     4 [unused]
//   float ProjQZ;                      // Offset:   44 Size:     4 [unused]
//   float4x4 LastFrameViewProject;     // Offset:   48 Size:    64 [unused]
//   float4x4 CurrentToLastFrame;       // Offset:  112 Size:    64
//   float ShadowCascade;               // Offset:  176 Size:     4 [unused]
//   float4x4 Projection;               // Offset:  192 Size:    64 [unused]
//   float3 EyePos;                     // Offset:  256 Size:    12
//   float3 CamDir;                     // Offset:  272 Size:    12 [unused]
//   float3 RenderOffset;               // Offset:  288 Size:    12
//   float4 TexCoordToClipSpace;        // Offset:  304 Size:    16
//   float4x4 InvView;                  // Offset:  320 Size:    64
//   float3 FogDepthToSliceParams;      // Offset:  384 Size:    12
//   float3 FogSliceToDepthParams;      // Offset:  400 Size:    12
//   float3 FogSliceToDepthParamsMeter; // Offset:  416 Size:    12 [unused]
//   float2 FogSliceStepLengthParams;   // Offset:  432 Size:     8 [unused]
//   float2 FogSliceStepLengthParamsMeter;// Offset:  440 Size:     8 [unused]
//   float2 NearFar;                    // Offset:  448 Size:     8 [unused]
//   float3 VolumeFogTextureSize;       // Offset:  464 Size:    12
//   float3 RcpVolumeFogTextureSize;    // Offset:  480 Size:    12
//   float3 SunDir;                     // Offset:  496 Size:    12 [unused]
//
// }
//
// cbuffer CBClusteredLights
// {
//
//   struct SClusteredLighting
//   {
//       
//       float4 m_vecClusteredSplitScheme;// Offset:    0
//       float4 m_vecAnalyticFogSettings;// Offset:   16
//       float3 m_vecFogDepthToSliceParams;// Offset:   32
//       float m_fVolumeFogRange;       // Offset:   44
//       float3 m_vecCamDir;            // Offset:   48
//       float m_fCamHeight;            // Offset:   60
//       float m_fAerialPerspectiveDepthScale;// Offset:   64
//       float3 m_vecFogColor;          // Offset:   68
//       float2 m_vecSpotShadowMapsSize;// Offset:   80
//       float2 m_vecRcpSpotShadowMapsSize;// Offset:   88
//
//   } ClusteredLighting;               // Offset:    0 Size:    96
//   
//   struct SClusteredDirLight
//   {
//       
//       float3 m_vecDirection;         // Offset:   96
//       float m_fMinRoughness;         // Offset:  108
//       float3 m_vecColor;             // Offset:  112
//       float _padding0;               // Offset:  124
//       float3 m_vecVolumeColor;       // Offset:  128
//       float _padding1;               // Offset:  140
//
//   } ClusteredSunLight;               // Offset:   96 Size:    48
//   
//   struct SClusteredDirShadows
//   {
//       
//       float4x3 m_matCascadeLightSpaceTransform[4];// Offset:  144
//       float4x3 m_matTerrainLightSpaceTransform[4];// Offset:  336
//       float4 m_vecCascadeShadowSettings[4];// Offset:  528
//       float4 m_vecCascadeSplits;     // Offset:  592
//       float4 m_vecTerrainSplits;     // Offset:  608
//       float2 m_vecNumSplits;         // Offset:  624
//       float2 m_vecCascadeFadOut;     // Offset:  632
//       float m_fCamHeightInMeter;     // Offset:  640
//       float m_fCascadeShadowMapSize; // Offset:  644
//       float m_fRcpCascadeShadowMapSize;// Offset:  648
//       float _padding0;               // Offset:  652
//       float4 m_vecCloudShadowScaleAndBias;// Offset:  656
//
//   } ClusteredDirShadows;             // Offset:  144 Size:   528
//   
//   struct SClusteredPointLight
//   {
//       
//       float4 m_arrLightData[6];      // Offset:  672
//       float m_fMinRoughness;         // Offset:  768
//       float m_fAreaHalfWidth;        // Offset:  772
//       float m_fAreaHalfHeight;       // Offset:  776
//       float m_fRcpSqrRadius;         // Offset:  780
//
//   } ClusteredPointLights[128];       // Offset:  672 Size: 14336
//   
//   struct SClusteredSpotLight
//   {
//       
//       uint m_iLightType;             // Offset: 15008
//       uint m_iIESProfile;            // Offset: 15012
//       float m_fRcpRadius;            // Offset: 15016
//       float m_fMinRoughness;         // Offset: 15020
//       float3 m_vecPos;               // Offset: 15024
//       float m_fAreaHalfWidth;        // Offset: 15036
//       float3 m_vecFwd;               // Offset: 15040
//       float m_fAreaHalfHeight;       // Offset: 15052
//       float3 m_vecLeft;              // Offset: 15056
//       float m_fSpotScale;            // Offset: 15068
//       float3 m_vecUp;                // Offset: 15072
//       float m_fRcpSqrRadius;         // Offset: 15084
//       float3 m_vecColor;             // Offset: 15088
//       float m_fSpotBias;             // Offset: 15100
//       float3 m_vecVolumeColor;       // Offset: 15104
//       float m_fShadowMapSlice;       // Offset: 15116
//       float3 m_vecVirtualOffset;     // Offset: 15120
//       float m_fVirtualAreaHalfWidth; // Offset: 15132
//
//   } ClusteredSpotLights[128];        // Offset: 15008 Size: 16384
//   float4x4 ClusteredSpotShadowMatrices[256];// Offset: 31392 Size: 16384
//
// }
//
// cbuffer CBGIVolume
// {
//
//   struct SGIVolumeConstants
//   {
//       
//       float m_fWorldToGridScale;     // Offset:    0
//       int m_iNumGridCells;           // Offset:    4
//       float2 _padding0;              // Offset:    8
//       float4 m_vecFadeOutScaleAndBias[2];// Offset:   16
//       float4 m_vecCellOffsetAndScale[2];// Offset:   48
//
//   } GIVolumeConstants;               // Offset:    0 Size:    80
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SmpClampLin                       sampler      NA          NA    0        1
// SmpLessClampLinear              sampler_c      NA          NA    1        1
// SmpWrapLin                        sampler      NA          NA    2        1
// InScatterTexture                  texture  float4          3d    0        1
// NoiseTexture                      texture   float          3d    1        1
// DepthTexture                      texture   float          2d    2        1
// ClusterLightPointers              texture   uint2          3d   10        1
// ClusterLightIndices               texture    uint         buf   11        1
// CascadeShadowMap                  texture   float     2darray   13        1
// TerrainShadowMap                  texture  float2     2darray   14        1
// SpotShadowMapTexture              texture   float          2d   15        1
// g_StaticLightGrid                 texture   sint4          3d   20        1
// g_StaticLightCellData             texture    byte         r/o   21        1
// g_StaticLightDust                 texture  float4         buf   25        1
// OutTexture                            UAV  float4          3d    0        1
// $Globals                          cbuffer      NA          NA    0        1
// CBClusteredLights                 cbuffer      NA          NA    8        1
// CBGIVolume                        cbuffer      NA          NA    9        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[31], immediateIndexed
dcl_constantbuffer cb8[2986], dynamicIndexed
dcl_constantbuffer cb9[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (uint,uint,uint,uint) t10
dcl_resource_buffer (uint,uint,uint,uint) t11
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture2darray (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture3d (sint,sint,sint,sint) t20
dcl_resource_raw t21
dcl_resource_buffer (float,float,float,float) t25
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 13
dcl_thread_group 8, 8, 1

utof r0.xyz, vThreadID.xyzx
add r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mov r1.xy, vThreadID.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyzw, t2.yzwx
mad r0.w, r0.w, cb0[29].z, l(1.000000)
lt r0.w, r0.z, r0.w

// Disable this optimization since it would cause artifacts later.
//if_nz r0.w
  mul r1.xyz, r0.xyzx, cb0[30].xyzx
  mad r0.xyz, r0.xyzx, cb0[30].xyzx, cb0[0].xyzx
  mul r0.z, r0.z, cb0[25].x
  mul r0.z, r0.z, l(0.950000)
  exp r0.z, r0.z
  mad r2.z, r0.z, cb0[25].y, cb0[25].z
  mad r0.zw, r0.xxxy, cb0[19].xxxy, cb0[19].zzzw
  mul r2.xy, r2.zzzz, r0.zwzz
  mov r2.w, l(1.000000)

// Fixing would be possible here but causes skew so fix it later!
	//ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw
	//add r13.w, r2.z, -r13.y
	//mul r13.w, r13.x, r13.w
	//add r2.x, r2.x, -r13.w

  dp4 r3.x, r2.xyzw, cb0[20].xyzw
  dp4 r3.y, r2.xyzw, cb0[21].xyzw
  dp4 r3.z, r2.xyzw, cb0[22].xyzw
  dp3 r0.z, r3.xyzx, r3.xyzx
  rsq r0.z, r0.z
  mul r2.xyw, r0.zzzz, r3.xyxz
  add r4.xyz, r3.xyzx, cb0[16].xyzx
  add r5.xyz, r4.xyzx, -cb0[18].xyzx
  mad r0.z, -r5.y, cb0[1].x, cb0[1].y
  min r0.z, r0.z, l(0.000000)
  exp r0.z, r0.z
  mad r0.z, r0.z, cb0[1].z, cb0[1].w
  lt r6.xyzw, cb8[37].xyzw, r2.zzzz
  and r6.xyzw, r6.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  add r0.w, r6.y, r6.x
  add r0.w, r6.z, r0.w
  add r6.z, r6.w, r0.w
  lt r0.w, r6.z, cb8[39].x
  if_nz r0.w
    ftou r0.w, r6.z
    imul null, r0.w, r0.w, l(3)
    mov r4.w, l(1.000000)
    dp4 r6.x, r4.xyzw, cb8[r0.w + 9].xyzw
    dp4 r6.y, r4.xyzw, cb8[r0.w + 10].xyzw
    dp4 r0.w, r4.xyzw, cb8[r0.w + 11].xyzw
    sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.w, r6.xyzx, t13.xxxx, s1, r0.w
  else 
    mov r0.w, l(1.000000)
  endif 
  lt r6.xyzw, cb8[38].xyzw, r2.zzzz
  and r6.xyzw, r6.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  add r1.w, r6.y, r6.x
  add r1.w, r6.z, r1.w
  add r6.z, r6.w, r1.w
  lt r1.w, r6.z, cb8[39].y
  if_nz r1.w
    ftou r1.w, r6.z
    imul null, r1.w, r1.w, l(3)
    mov r4.w, l(1.000000)
    dp4 r6.x, r4.xyzw, cb8[r1.w + 21].xyzw
    dp4 r6.y, r4.xyzw, cb8[r1.w + 22].xyzw
    dp4 r1.w, r4.xyzw, cb8[r1.w + 23].xyzw
    sample_l_indexable(texture2darray)(float,float,float,float) r3.yw, r6.xyzx, t14.zxwy, s0, l(0.000000)
    mad_sat r3.w, -r3.y, r3.y, r3.w
    add r3.w, r3.w, l(0.000010)
    min r3.w, r3.w, l(1.000000)
    add r4.w, -r1.w, r3.y
    mad r4.w, r4.w, r4.w, r3.w
    div r3.w, r3.w, r4.w
    add r3.w, r3.w, l(-0.700000)
    mul_sat r3.w, r3.w, l(3.33333325)
    ge r1.w, r3.y, r1.w
    and r1.w, r1.w, l(0x3f800000)
    max r1.w, r1.w, r3.w
    min r0.w, r0.w, r1.w
  endif 
  dp3 r1.w, cb8[6].xyzx, r2.xywx
  add r1.w, -r1.w, l(1.250000)
  log r1.w, r1.w
  mul r1.w, r1.w, l(1.500000)
  exp r1.w, r1.w
  div r1.w, l(0.0596830994), r1.w
  mul r0.w, r0.w, r1.w
  mul r0.xy, r0.xyxx, l(80.000000, 45.000000, 0.000000, 0.000000)
  ftou r6.xy, r0.xyxx
  mad r0.x, r2.z, cb8[0].x, cb8[0].y
  log r0.x, r0.x
  mad r0.x, r0.x, cb8[0].z, cb8[0].w
  max r0.x, r0.x, l(0.000000)
  min r0.x, r0.x, l(15.000000)
  ftou r6.z, r0.x
  mov r6.w, l(0)
  ld_indexable(texture3d)(uint,uint,uint,uint) r0.xy, r6.xyzw, t10.xyzw
  ushr r1.w, r0.y, l(16)
  and r0.y, r0.y, l(0x0000ffff)
  mov r6.xyz, r4.xyzx
  mov r6.w, l(1.000000)
  mov r7.xyz, l(0,0,0,0)
  mov r2.z, r0.x
  mov r3.y, l(0)
  loop 
    uge r3.w, r3.y, r1.w
    breakc_nz r3.w
    iadd r3.w, r2.z, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r2.zzzz, t11.yzwx
    imul null, r5.w, r4.w, l(7)
    add r8.xyz, -r4.xyzx, cb8[r5.w + 43].xyzx
    dp3 r7.w, r8.xyzx, r8.xyzx
    mul r7.w, r7.w, cb8[r5.w + 48].w
    mad r7.w, -r7.w, r7.w, l(1.000000)
    max r7.w, r7.w, l(0.000000)
    mul r7.w, r7.w, r7.w
    ieq r8.w, l(2), cb8[r5.w + 42].x
    if_nz r8.w
      mad r9.xyz, -cb8[r5.w + 45].xyzx, cb8[r5.w + 48].yyyy, r8.xyzx
      mad r10.xyz, cb8[r5.w + 45].xyzx, cb8[r5.w + 48].yyyy, r8.xyzx
      add r10.xyz, -r9.xyzx, r10.xyzx
      dp3 r8.w, -r9.xyzx, r10.xyzx
      dp3 r9.w, r10.xyzx, r10.xyzx
      div_sat r8.w, r8.w, r9.w
      mad r9.xyz, r8.wwww, r10.xyzx, r9.xyzx
    else 
      mov r9.xyz, r8.xyzx
    endif 
    dp3 r8.w, r9.xyzx, r9.xyzx
    max r9.w, r8.w, l(1.000000)
    rcp r9.w, r9.w
    mul r7.w, r7.w, r9.w
    lt r9.w, l(0.000000), r7.w
    if_nz r9.w
      max r9.w, |r8.z|, |r8.y|
      max r9.w, |r8.x|, r9.w
      eq r10.xyz, r8.xyzx, |r8.xyzx|
      eq r8.xy, |r8.xyxx|, r9.wwww
      movc r10.xyz, r10.xyzx, l(0,2.000000,4.000000,0), l(1.000000,3.000000,5.000000,0)
      movc r8.y, r8.y, r10.y, r10.z
      movc r8.x, r8.x, r10.x, r8.y
      ftou r8.x, r8.x
      imad r4.w, r4.w, l(7), r8.x
      ge r8.x, cb8[r4.w + 42].w, l(0.000000)
      rsq r8.y, r8.w
      mul r8.yzw, r8.yyyy, r9.xxyz
      if_nz r8.x
        ftou r4.w, cb8[r4.w + 42].w
        ishl r4.w, r4.w, l(2)
        dp4 r9.x, r6.xyzw, cb8[r4.w + 1962].xyzw
        dp4 r9.y, r6.xyzw, cb8[r4.w + 1963].xyzw
        dp4 r9.z, r6.xyzw, cb8[r4.w + 1964].xyzw
        dp4 r4.w, r6.xyzw, cb8[r4.w + 1965].xyzw
        div r9.xyz, r9.xyzx, r4.wwww
        sample_c_lz_indexable(texture2d)(float,float,float,float) r4.w, r9.xyxx, t15.xxxx, s1, r9.z
      else 
        mov r4.w, l(1.000000)
      endif 
      min r7.w, r7.w, l(0.000400)
      dp3 r8.x, r8.yzwy, r2.xywx
      add r8.x, -r8.x, l(1.250000)
      log r8.x, r8.x
      mul r8.x, r8.x, l(1.500000)
      exp r8.x, r8.x
      div r8.x, l(0.0596830994), r8.x
      mul r7.w, r7.w, r8.x
      mul r4.w, r4.w, r7.w
      mad r7.xyz, cb8[r5.w + 47].xyzx, r4.wwww, r7.xyzx
    endif 
    iadd r3.y, r3.y, l(1)
    mov r2.z, r3.w
  endloop 
  mov r6.w, l(1.000000)
  mov r8.xyz, r7.xyzx
  mov r0.x, r2.z
  mov r1.w, l(0)
  loop 
    uge r3.y, r1.w, r0.y
    breakc_nz r3.y
    iadd r3.y, r0.x, l(1)
    ld_indexable(buffer)(uint,uint,uint,uint) r3.w, r0.xxxx, t11.yzwx
    ishl r3.w, r3.w, l(3)
    add r9.xyz, -r4.xyzx, cb8[r3.w + 939].xyzx
    dp3 r4.w, r9.xyzx, r9.xyzx
    mul r4.w, r4.w, cb8[r3.w + 942].w
    mad r4.w, -r4.w, r4.w, l(1.000000)
    max r4.w, r4.w, l(0.000000)
    mul r4.w, r4.w, r4.w
    ieq r5.w, l(4), cb8[r3.w + 938].x
    if_nz r5.w
      mad r10.xyz, -cb8[r3.w + 941].xyzx, cb8[r3.w + 945].wwww, r9.xyzx
      mad r11.xyz, cb8[r3.w + 941].xyzx, cb8[r3.w + 945].wwww, r9.xyzx
      add r11.xyz, -r10.xyzx, r11.xyzx
      dp3 r5.w, -r10.xyzx, r11.xyzx
      dp3 r7.w, r11.xyzx, r11.xyzx
      div_sat r5.w, r5.w, r7.w
      mad r9.xyz, r5.wwww, r11.xyzx, r10.xyzx
    endif 
    dp3 r5.w, r9.xyzx, r9.xyzx
    rsq r7.w, r5.w
    mul r10.xyz, r7.wwww, r9.xyzx
    max r5.w, r5.w, l(1.000000)
    rcp r5.w, r5.w
    mul r4.w, r4.w, r5.w
    add r9.xyz, r9.xyzx, cb8[r3.w + 945].xyzx
    dp3 r5.w, r9.xyzx, r9.xyzx
    rsq r5.w, r5.w
    mul r9.xyz, r5.wwww, r9.xyzx
    dp3 r5.w, r9.xyzx, -cb8[r3.w + 940].xyzx
    mad_sat r5.w, r5.w, cb8[r3.w + 941].w, cb8[r3.w + 943].w
    mul r5.w, r5.w, r5.w
    mul r4.w, r4.w, r5.w
    dp3 r5.w, -cb8[r3.w + 940].xyzx, r10.xyzx
    lt r5.w, l(0.000000), r5.w
    and r5.w, r5.w, l(0x3f800000)
    mul r4.w, r4.w, r5.w
    lt r5.w, l(0.000000), r4.w
    if_nz r5.w
      ge r5.w, cb8[r3.w + 944].w, l(0.000000)
      if_nz r5.w
        ftou r5.w, cb8[r3.w + 944].w
        ishl r5.w, r5.w, l(2)
        dp4 r9.x, r6.xyzw, cb8[r5.w + 1962].xyzw
        dp4 r9.y, r6.xyzw, cb8[r5.w + 1963].xyzw
        dp4 r9.z, r6.xyzw, cb8[r5.w + 1964].xyzw
        dp4 r5.w, r6.xyzw, cb8[r5.w + 1965].xyzw
        div r9.xyz, r9.xyzx, r5.wwww
        sample_c_lz_indexable(texture2d)(float,float,float,float) r5.w, r9.xyxx, t15.xxxx, s1, r9.z
      else 
        mov r5.w, l(1.000000)
      endif 
      min r4.w, r4.w, l(0.000400)
      dp3 r7.w, r10.xyzx, r2.xywx
      add r7.w, -r7.w, l(1.250000)
      log r7.w, r7.w
      mul r7.w, r7.w, l(1.500000)
      exp r7.w, r7.w
      div r7.w, l(0.0596830994), r7.w
      mul r4.w, r4.w, r7.w
      mul r4.w, r5.w, r4.w
      mad r8.xyz, cb8[r3.w + 944].xyzx, r4.wwww, r8.xyzx
    endif 
    iadd r1.w, r1.w, l(1)
    mov r0.x, r3.y
  endloop 
  mad r0.xyw, cb8[8].xyxz, r0.wwww, r8.xyxz
  dp2 r1.w, r3.xzxx, r3.xzxx
  mad_sat r2.x, r1.w, cb9[1].x, cb9[1].y
  lt r2.y, l(0.000000), r2.x
  if_nz r2.y
    mad r2.yzw, r6.xxyz, cb9[3].wwww, cb9[3].xxyz
    round_ni r3.xy, r2.ywyy
    ftoi r3.xy, r3.xyxx
    mov r3.zw, l(0,0,0,0)
    ld_indexable(texture3d)(sint,sint,sint,sint) r3.xyzw, r3.xyzw, t20.xyzw
    frc r2.yw, r2.yyyw
    mul r4.xz, r2.yywy, l(8.000000, 0.000000, 8.000000, 0.000000)
    mad r4.y, r2.z, l(8.000000), r3.z
    ftoi r2.yzw, r4.xxzy
    bfi r2.y, l(26), l(6), r2.w, r2.y
    imad r2.y, r2.z, l(8), r2.y
    imax r2.y, r2.y, l(0)
    imin r2.y, r3.w, r2.y
    ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r7.xyzw, r3.x, t21.xyzw
    iadd r7.xyzw, r3.xxxx, r7.xyzw
    iadd r2.z, r3.x, l(16)
    ishl r2.y, r2.y, l(2)
    iadd r2.y, r2.y, r2.z
    ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.y, r2.y, t21.xxxx
    ieq r2.z, r2.y, l(-1)
    movc r2.x, r2.z, l(0), r2.x
    if_z r2.z
      mov r4.w, l(1.000000)
      mov r2.z, r2.y
      loop 
        and r2.w, r2.z, l(0x00800000)
        breakc_nz r2.w
        iadd r2.w, r2.z, r7.x
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.zw, r2.w, t21.xxxy
        and r2.w, r3.z, l(0x000ffff0)
        iadd r2.w, r2.w, r7.y
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r8.xyzw, r2.w, t21.xyzw
        ushr r9.xy, r3.zwzz, l(8, 20, 0, 0)
        bfi r2.w, l(12), l(0), r9.y, r9.x
        bfi r3.z, l(4), l(20), r3.z, l(0)
        bfi r3.z, l(20), l(0), r3.w, r3.z
        dp4 r3.w, r8.xyzw, r4.xyzw
        lt r3.w, l(0.000000), r3.w
        movc r2.z, r3.w, r3.z, r2.w
      endloop 
      and r2.y, r2.z, l(0x007fffff)
      iadd r2.y, r2.y, r7.z
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r8.xyzw, r2.y, t21.xyzw
      ushr r9.xz, r8.xxyx, l(16, 0, 16, 0)
      and r9.yw, r8.xxxy, l(0, 0x0000ffff, 0, 0x0000ffff)
      imad r7.xyzw, r9.xyzw, l(12, 12, 12, 12), r7.wwww
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.yzw, r7.x, t21.xxyz
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r10.xyz, r7.y, t21.xyzx
      add r10.xyz, -r2.wyzw, r10.zxyz
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r7.xyz, r7.z, t21.xyzx
      add r7.xyz, -r2.zwyz, r7.yzxy
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r11.xyz, r7.w, t21.xyzx
      add r11.xyz, -r2.wyzw, r11.zxyz
      add r2.yzw, -r2.yyzw, r4.xxyz
      mul r2.yzw, r8.zzzz, r2.yyzw
      mul r8.xyz, r7.yzxy, r11.zxyz
      mad r8.xyz, r7.xyzx, r11.xyzx, -r8.xyzx
      dp3 r12.y, r8.xyzx, r2.yzwy
      mul r8.xyz, r10.zxyz, r11.xyzx
      mad r8.xyz, r10.xyzx, r11.zxyz, -r8.xyzx
      dp3 r12.z, r8.xyzx, r2.yzwy
      mul r8.xyz, r7.xyzx, r10.xyzx
      mad r7.xyz, r10.zxyz, r7.yzxy, -r8.xyzx
      dp3 r12.w, r7.xyzx, r2.yzwy
      dp3 r2.y, r12.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
      add r12.x, -r2.y, l(1.000000)
      iadd r7.xyzw, r3.yyyy, r9.xyzw
      ige r2.y, r8.w, l(0)
      if_nz r2.y
        iadd r2.y, r3.x, r8.w
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r8.xyzw, r2.y, t21.xyzw
        iadd r9.xyzw, r2.yyyy, l(16, 24, 40, 48)
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.zw, r9.x, t21.xxxy
        mov r4.w, l(1.000000)
        dp4 r3.y, r8.xyzw, r4.xyzw
        lt r3.z, r3.y, l(0.000000)
        movc r2.z, r3.z, r2.w, r2.z
        mov r8.x, r3.y
        mov r2.w, r2.z
        loop 
          ilt r3.z, r2.w, l(0)
          breakc_nz r3.z
          iadd r3.z, r2.w, r3.x
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r10.xyzw, r3.z, t21.xyzw
          iadd r3.z, r3.z, l(16)
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.zw, r3.z, t21.xxxy
          dp4 r8.x, r10.xyzw, r4.xyzw
          lt r5.w, r8.x, l(0.000000)
          movc r2.w, r5.w, r3.w, r3.z
        endloop 
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r10.xyzw, r9.y, t21.xyzw
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.zw, r9.z, t21.xxxy
        dp4 r3.y, r10.xyzw, r4.xyzw
        lt r3.z, r3.y, l(0.000000)
        movc r2.z, r3.z, r2.w, r2.z
        mov r8.y, r3.y
        mov r2.w, r2.z
        loop 
          ilt r3.z, r2.w, l(0)
          breakc_nz r3.z
          iadd r3.z, r2.w, r3.x
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r10.xyzw, r3.z, t21.xyzw
          iadd r3.z, r3.z, l(16)
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.zw, r3.z, t21.xxxy
          dp4 r8.y, r10.xyzw, r4.xyzw
          lt r5.w, r8.y, l(0.000000)
          movc r2.w, r5.w, r3.w, r3.z
        endloop 
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r9.xyzw, r9.w, t21.xyzw
        iadd r2.yzw, r2.yyyy, l(0, 64, 72, 88)
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.yz, r2.y, t21.xxyx
        dp4 r2.y, r9.xyzw, r4.xyzw
        lt r3.w, r2.y, l(0.000000)
        movc r3.y, r3.w, r3.z, r3.y
        mov r8.z, r2.y
        mov r3.z, r3.y
        loop 
          ilt r3.w, r3.z, l(0)
          breakc_nz r3.w
          iadd r3.w, r3.z, r3.x
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r9.xyzw, r3.w, t21.xyzw
          iadd r3.w, r3.w, l(16)
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r10.xy, r3.w, t21.xyxx
          dp4 r8.z, r9.xyzw, r4.xyzw
          lt r3.w, r8.z, l(0.000000)
          movc r3.z, r3.w, r10.y, r10.x
        endloop 
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r9.xyzw, r2.z, t21.xyzw
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.yz, r2.w, t21.xxyx
        dp4 r2.w, r9.xyzw, r4.xyzw
        lt r3.y, r2.w, l(0.000000)
        movc r2.y, r3.y, r2.z, r2.y
        mov r8.w, r2.w
        mov r2.z, r2.y
        loop 
          ilt r3.y, r2.z, l(0)
          breakc_nz r3.y
          iadd r3.y, r2.z, r3.x
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r9.xyzw, r3.y, t21.xyzw
          iadd r3.y, r3.y, l(16)
          ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.yz, r3.y, t21.xxyx
          dp4 r8.w, r9.xyzw, r4.xyzw
          lt r3.w, r8.w, l(0.000000)
          movc r2.z, r3.w, r3.z, r3.y
        endloop 
        ge r3.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
        and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
        mul r3.xyzw, r3.xyzw, r12.xyzw
        dp4 r2.y, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
        lt r2.z, l(0.000010), r2.y
        div r3.xyzw, r3.xyzw, r2.yyyy
        movc r12.xyzw, r2.zzzz, r3.xyzw, r12.xyzw
      endif 
      mul r3.xyzw, r2.xxxx, r12.xyzw
      ld_indexable(buffer)(float,float,float,float) r4.xyzw, r7.xxxx, t25.xyzw
      ld_indexable(buffer)(float,float,float,float) r8.xyzw, r7.yyyy, t25.xyzw
      mul r8.xyzw, r3.yyyy, r8.xyzw
      mad r4.xyzw, r4.xyzw, r3.xxxx, r8.xyzw
      ld_indexable(buffer)(float,float,float,float) r8.xyzw, r7.zzzz, t25.xyzw
      mad r4.xyzw, r8.xyzw, r3.zzzz, r4.xyzw
      ld_indexable(buffer)(float,float,float,float) r7.xyzw, r7.wwww, t25.xyzw
      mad r3.xyzw, r7.xyzw, r3.wwww, r4.xyzw
    else 
      mov r3.xyzw, l(0,0,0,0)
    endif 
  else 
    mov r3.xyzw, l(0,0,0,0)
    mov r2.x, l(0)
  endif 
  mad_sat r1.w, r1.w, cb9[2].x, cb9[2].y
  add r1.w, -r2.x, r1.w
  lt r2.x, l(0.000000), r1.w
  if_nz r2.x
    mad r2.xyz, r6.xyzx, cb9[4].wwww, cb9[4].xyzx
    round_ni r4.xy, r2.xzxx
    ftoi r4.xy, r4.xyxx
    mov r4.zw, l(0,0,1,0)
    ld_indexable(texture3d)(sint,sint,sint,sint) r4.xyzw, r4.xyzw, t20.xyzw
    frc r2.xz, r2.xxzx
    mul r6.xz, r2.xxzx, l(8.000000, 0.000000, 8.000000, 0.000000)
    mad r6.y, r2.y, l(8.000000), r4.z
    ftoi r2.xyz, r6.xzyx
    bfi r2.x, l(26), l(6), r2.z, r2.x
    imad r2.x, r2.y, l(8), r2.x
    imax r2.x, r2.x, l(0)
    imin r2.x, r4.w, r2.x
    ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r7.xyzw, r4.x, t21.xyzw
    iadd r7.xyzw, r4.xxxx, r7.xyzw
    iadd r2.y, r4.x, l(16)
    ishl r2.x, r2.x, l(2)
    iadd r2.x, r2.x, r2.y
    ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.x, r2.x, t21.xxxx
    ieq r2.y, r2.x, l(-1)
    movc r1.w, r2.y, l(0), r1.w
    if_z r2.y
      mov r6.w, l(1.000000)
      mov r2.y, r2.x
      loop 
        and r2.z, r2.y, l(0x00800000)
        breakc_nz r2.z
        iadd r2.z, r2.y, r7.x
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.zw, r2.z, t21.xxxy
        and r4.x, r2.z, l(0x000ffff0)
        iadd r4.x, r4.x, r7.y
        ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r8.xyzw, r4.x, t21.xyzw
        ushr r4.xz, r2.zzwz, l(8, 0, 20, 0)
        bfi r4.x, l(12), l(0), r4.z, r4.x
        bfi r2.z, l(4), l(20), r2.z, l(0)
        bfi r2.z, l(20), l(0), r2.w, r2.z
        dp4 r2.w, r8.xyzw, r6.xyzw
        lt r2.w, l(0.000000), r2.w
        movc r2.y, r2.w, r2.z, r4.x
      endloop 
      and r2.x, r2.y, l(0x007fffff)
      iadd r2.x, r2.x, r7.z
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyz, r2.x, t21.xyzx
      ushr r8.xz, r2.xxyx, l(16, 0, 16, 0)
      and r8.yw, r2.xxxy, l(0, 0x0000ffff, 0, 0x0000ffff)
      imad r7.xyzw, r8.xyzw, l(12, 12, 12, 12), r7.wwww
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyw, r7.x, t21.xyxz
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r4.xzw, r7.y, t21.xxyz
      add r4.xzw, -r2.wwxy, r4.wwxz
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r7.xyz, r7.z, t21.xyzx
      add r7.xyz, -r2.ywxy, r7.yzxy
      ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r9.xyz, r7.w, t21.xyzx
      add r9.xyz, -r2.wxyw, r9.zxyz
      add r2.xyw, -r2.xyxw, r6.xyxz
      mul r2.xyz, r2.zzzz, r2.xywx
      mul r6.xyz, r7.yzxy, r9.zxyz
      mad r6.xyz, r7.xyzx, r9.xyzx, -r6.xyzx
      dp3 r6.y, r6.xyzx, r2.xyzx
      mul r10.xyz, r4.wxzw, r9.xyzx
      mad r9.xyz, r4.xzwx, r9.zxyz, -r10.xyzx
      dp3 r6.z, r9.xyzx, r2.xyzx
      mul r9.xyz, r4.xzwx, r7.xyzx
      mad r4.xzw, r4.wwxz, r7.yyzx, -r9.xxyz
      dp3 r6.w, r4.xzwx, r2.xyzx
      dp3 r2.x, r6.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
      add r6.x, -r2.x, l(1.000000)
      iadd r2.xyzw, r4.yyyy, r8.xyzw
      mul r4.xyzw, r1.wwww, r6.xyzw
      ld_indexable(buffer)(float,float,float,float) r6.xyzw, r2.xxxx, t25.xyzw
      ld_indexable(buffer)(float,float,float,float) r7.xyzw, r2.yyyy, t25.xyzw
      mul r7.xyzw, r4.yyyy, r7.xyzw
      mad r6.xyzw, r6.xyzw, r4.xxxx, r7.xyzw
      ld_indexable(buffer)(float,float,float,float) r7.xyzw, r2.zzzz, t25.xyzw
      mad r6.xyzw, r7.xyzw, r4.zzzz, r6.xyzw
      ld_indexable(buffer)(float,float,float,float) r2.xyzw, r2.wwww, t25.xyzw
      mad r2.xyzw, r2.xyzw, r4.wwww, r6.xyzw
      add r3.xyzw, r2.xyzw, r3.xyzw
    endif 
  endif 
  add r2.xyz, r0.xywx, r3.xyzx
  mad r0.x, r3.w, cb0[2].y, r0.z
  mul r0.yzw, r5.xxyz, l(0.000000, 0.002500, 0.002500, 0.002500)
  sample_l_indexable(texture3d)(float,float,float,float) r0.y, r0.yzwy, t1.yxzw, s2, l(0.000000)
  dp2 r2.w, r0.yyyy, r0.xxxx
  mul r0.x, r1.z, cb0[25].x
  exp r0.x, r0.x
  mad r0.z, r0.x, cb0[25].y, cb0[25].z
  mad r1.xy, r1.xyxx, cb0[19].xyxx, cb0[19].zwzz
  mul r0.xy, r0.zzzz, r1.xyxx
  mov r0.w, l(1.000000)
  dp4 r1.x, r0.xyzw, cb0[7].xyzw
  dp4 r1.y, r0.xyzw, cb0[8].xyzw
  dp4 r0.x, r0.xyzw, cb0[10].xyzw
  div r0.yz, r1.xxyx, r0.xxxx
  mad r1.xy, r0.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  add r0.x, r0.x, cb0[24].x
  log r0.x, r0.x
  mad r1.z, r0.x, cb0[24].y, cb0[24].z
  mov_sat r0.xyz, r1.xyzx
  eq r0.xyz, r0.xyzx, r1.xyzx
  and r0.x, r0.y, r0.x
  and r0.x, r0.z, r0.x
  if_nz r0.x
    sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
    and r1.x, r0.w, l(0x7f800000)
    ine r1.x, r1.x, l(0x7f800000)
    add r3.xyzw, -r0.xyzw, r2.xyzw
    mad r0.xyzw, r3.xyzw, l(0.062500, 0.062500, 0.062500, 0.062500), r0.xyzw
    movc r2.xyzw, r1.xxxx, r0.xyzw, r2.xyzw
  endif 
//else 
//  mov r2.xyzw, l(0,0,0,0x7f800000)
//endif 

store_uav_typed u0.xyzw, vThreadID.xyzz, r2.xyzw
ret 
// Approximately 531 instruction slots used
