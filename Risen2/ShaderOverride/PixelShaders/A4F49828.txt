//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float MinLightBleeding;
//
//
// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   MinLightBleeding c0       1
//
//
// Default values:
//
//   MinLightBleeding
//     c0   = { 0.7, 0, 0, 0 };
//

//    preshader
//    neg r0.x, c0.x
//    add r1.x, r0.x, (1)
//    rcp c13.x, r1.x

// approximately 3 instructions used
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   sampler2D DepthSampler;
//   float4x4 DepthToShadowMatrix;
//   float4x4 DepthToVarianceShadowMatrix;
//   float DizzerKernelSize;
//   sampler2D DizzerSampler;
//   float3 EyePos;
//   float2 FadOut;
//   float MinLightBleeding;
//   float MinVariance;
//   sampler2D ShadowSampler;
//   sampler2D StereoParamsSampler;
//   float3 StereoVec;
//   sampler2D VarianceShadowSampler;
//
//
// Registers:
//
//   Name                        Reg   Size
//   --------------------------- ----- ----
//   DepthToShadowMatrix         c0       4
//   DepthToVarianceShadowMatrix c4       3
//   StereoVec                   c7       1
//   DizzerKernelSize            c8       1
//   FadOut                      c9       1
//   EyePos                      c10      1
//   MinVariance                 c11      1
//   MinLightBleeding            c12      1
//   StereoParamsSampler         s0       1
//   DepthSampler                s1       1
//   DizzerSampler               s2       1
//   ShadowSampler               s3       1
//   VarianceShadowSampler       s4       1
//
//
// Default values:
//
//   DepthToShadowMatrix
//     c0   = { 0, 0, 0, 0 };
//     c1   = { 0, 0, 0, 0 };
//     c2   = { 0, 0, 0, 0 };
//     c3   = { 0, 0, 0, 0 };
//
//   DepthToVarianceShadowMatrix
//     c4   = { 0, 0, 0, 0 };
//     c5   = { 0, 0, 0, 0 };
//     c6   = { 0, 0, 0, 0 };
//
//   StereoVec
//     c7   = { 0, 0, 0, 0 };
//
//   DizzerKernelSize
//     c8   = { 0.01, 0, 0, 0 };
//
//   FadOut
//     c9   = { 0, 0, 0, 0 };
//
//   EyePos
//     c10  = { 0, 0, 0, 0 };
//
//   MinVariance
//     c11  = { 1e-005, 0, 0, 0 };
//
//   MinLightBleeding
//     c12  = { 0.7, 0, 0, 0 };
//

// Shadows

    ps_3_0
// Helix sampler
def c200, 0, 1.025, 0.0625, 0
dcl_2d s13
    def c14, 0.0625, 0.5, 2, -1
    def c15, 0, 1, 0.125, 0
    dcl_texcoord v0.xy
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xy
    dcl_2d s0						// works similar to helix sampler but different
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
    texld_pp r0, v2, s2 			// dizzer sample
    mad r0, r0, c14.z, c14.w
    mul_pp r0, r0, c8.x
    
    texld r1, c14, s0				// get stereo params    
    mad r1.xyz, c7, r1.z, v1		// displace shadow dependent on depth, c7: broken stereo vector
    texld r2, v0, s1				// sample depth with v0, r2.x is depth
    
// pos.x += sep * (1 - c * conv / depth)
texldl r29, c200.z, s13
rcp r28.x, r2.x						// 1 / depth
mul r29.w, c200.y, r28.x			// c / depth

// +1.025*depth to x for N, -1.025*depth to x for S
// -1.025*depth to z for E, +1.025*depth to z for W
// Extract xz vector from stereo vector (c7)
nrm r27, c7
mul r27.xz, r27.xz, r29.ww		// xz_vec * c / depth
mul r27.xz, r27.xz, r29.yy		// (.) * convergence

// apply stereo correction
mad r1.xz, r29.xx, r27.xz, r1.xz	// += (.) * seperation

    mad r1.xyz, r1, r2.x, c10		// shifts shadow
    mad_sat r2.x, r2.x, c9.x, c9.y
    
    mov r1.w, v1.w
    dp4 r2.y, r1, c3
    rcp r2.y, r2.y
    dp4 r3.x, r1, c0
    dp4 r3.y, r1, c1
    mad r4, r3.xyxy, r2.y, r0.xzyz
    
    texld_pp r5, r4, s3
    texld_pp r4, r4.zwzw, s3
    mov_pp r5.y, r4.x
    mad r4, r3.xyxy, r2.y, r0.ywzw
    texld_pp r6, r4, s3
    texld_pp r4, r4.zwzw, s3
    mov_pp r5.w, r4.x
    mov_pp r5.z, r6.x
    dp4 r2.z, r1, c2
    add r4, -r5, r2.z
    cmp_pp r4, r4, c15.x, c15.y
    dp4_pp r2.w, r4, c15.z
    mad r4, r3.xyxy, r2.y, r0.zxwx
    mad r0, r3.xyxy, r2.y, r0.wywz
    texld_pp r3, r4, s3
    texld_pp r4, r4.zwzw, s3
    mov_pp r3.y, r4.x
    texld_pp r4, r0, s3
    texld_pp r0, r0.zwzw, s3
    mov_pp r3.w, r0.x
    mov_pp r3.z, r4.x
    add r0, r2.z, -r3
    cmp_pp r0, r0, c15.x, c15.y
    dp4_pp r0.x, r0, c15.z
    add r0.x, r0.x, r2.w
    max r3.x, r0.x, r2.x
    max r0.x, r3.x, r2.x
    dp4 r2.x, r1, c4
    dp4 r2.y, r1, c5
    dp4 r0.y, r1, c6
    texld r1, r2, s4
    add r0.z, r0.y, -r1.x
    add r0.y, -r0.y, r1.x
    mad r0.w, r1.x, -r1.x, r1.y
    max r1.x, r0.w, c11.x
    cmp r0.y, r0.y, c15.y, c15.x
    mad r0.z, r0.z, r0.z, r1.x
    rcp r0.z, r0.z
    mad r0.z, r1.x, r0.z, -c12.x
    mul_sat r0.z, r0.z, c13.x
    max r1.x, r0.y, r0.z
    min oC0, r1.x, r0.x
   
// approximately 56 instruction slots used (12 texture, 44 arithmetic)
