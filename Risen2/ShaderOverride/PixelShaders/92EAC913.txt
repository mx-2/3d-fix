//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CamDir;
//   sampler2D DepthSampler;
//   sampler2D DiffuseLookupSampler;
//   float2 NearFar;
//   sampler2D NormalSampler;
//   float4 ScreenToTexCoord;
//   sampler2D ShadowMaskSampler;
//   sampler2D SpecularLookupSampler;
//
//
// Registers:
//
//   Name                  Reg   Size
//   --------------------- ----- ----
//   CamDir                c0       1
//   NearFar               c1       1
//   ScreenToTexCoord      c2       1
//   DepthSampler          s0       1
//   NormalSampler         s1       1
//   ShadowMaskSampler     s2       1
//   DiffuseLookupSampler  s3       1
//   SpecularLookupSampler s4       1
//
//
// Default values:
//
//   CamDir
//     c0   = { 0, 0, 0, 0 };
//
//   NearFar
//     c1   = { 0, 0, 0, 0 };
//
//   ScreenToTexCoord
//     c2   = { 0, 0, 0, 0 };
//

// c220 = InverseViewProjection - from parent VS

// Lights - torches on walls
// Specular highlight in lightspheres on:
//  - walls
//  - table in first floor of the sword coast main building
//  - cannons

// TODO: The lights are somehow different between the eyes
// if looking nearly parallel onto the lighted surface from close range.
// -> Fix specular highlights

    ps_3_0
def c200, 1, 230000, 0.0625, 0
def c201, 0.5, 1, 0.5, 1
def c202, 0.5, 0.5, 0.5, 0.5
    def c3, 0.5, 0.99609375, 0.124511719, 0.000244140625
    def c4, 2, -1, 3, 1
    dcl_texcoord v0			// color
    dcl_texcoord1 v1.xyz
    dcl_texcoord2_pp v2
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
dcl_2d s13

    mad r0.xy, vPos, c2, c2.zwzw	// Screen position
    								// (using vPos means no halo issues to worry about in the VS)
    texld r1, r0, s0				// Sample screen depth to r1
    mul r0.z, r1.x, c1.y			// Scaling depth buffer
mov r28.x, r0.z						// Store scaled depth
	nrm_pp r1.xyz, v1
    dp3 r0.w, c0, r1
    rcp r0.w, r0.w
    mul r0.z, r0.w, r0.z			// Scaling depth buffer
   
    //mad_pp r2.xyz, r1, -r0.z, v2	// Multiplying 3D coordinate by depth value and adding offset
									// Split that instruction in two:
mul r20.xyz, r1, -r0.z				// r20 is in world coordiantes

//add r20.x, c201.x, r20.x			// moves relative to world, WE dir, range: +/- 200
//mov r29.w, c201.x

// Pixel shader correction formula
texld r29, c200.z, s13
//mul r29.w, c200.y, r28.x		// Using scaled depth removes the magic constant here.
// Strange, but convergence must not be used in this fix!
//mul r29.w, r29.w, r29.y			// c * conv * depth
//add r29.w, -r29.w, c200.x		// 1 - (.), must not be calculated for this shader
mul r29.w, r28.x, r29.x			// depth * separation

// Transform correction from screen to world coordinates
mul r30.x, r29.w, c220.x
mul r30.y, r29.w, c221.x
mul r30.z, r29.w, c222.x
mul r30.w, r29.w, c223.x

// Apply correction
add r2.xyz, r20.xyz, r30.xyz
// 2nd half of split instruction:
add r2.xyz, r2, v2

    dp3_pp r0.z, r2, r2
    rsq_pp r0.z, r0.z
    mad_pp r3.xyz, r2, r0.z, -r1
    mul_pp r2.xyz, r0.z, r2
    rcp_pp r0.z, r0.z
    mul_sat_pp r0.z, r0.z, v2.w
    nrm_pp r4.xyz, r3
    texld_pp r3, r0, s1
    texld_pp r5, r0, s2					// sample light
    mad_pp r0.xyw, r3.xyzz, c4.x, c4.y
    mov_pp r3.y, r3.w
    nrm_pp r6.xyz, r0.xyww
    dp3_sat_pp r4.z, r4, r6
    dp3_pp r0.y, r2, -r1
    dp3_pp r0.x, r2, r6
    dp3_pp r1.w, -r1, r6
    mad_pp r4.xy, r0, c3.x, c3.x
    mul_pp r0.y, r5.y, c3.y
    mad r2.xyz, r4, c3.z, r0.y

// Disabled specular below, high visual quality loss

    add_pp r1.xyz, r2, c3.w
    //texld_pp r2, r1.ywzw, s3		// diffuse sampler, darker
    mul_pp r0.x, r0.x, r2.w
    //texld_pp r2, r1.xwzw, s3		// broken, black stripe below
    //texld_pp r4, r1.xwzw, s4		// specular sampler, used below
mov r4, c201
    mov_pp r3.x, r1.z
    //texld_pp r1, r3, s4			// disabling makes LR differences stronger
mov r4, c202
    mul_pp r1.w, r4.y, r1.x
    max_pp r1.xyz, r0.x, r2
    mul r1, r1, v0					// no light, broken shadow
    mul_pp r0.x, r0.z, r0.z
    mul_pp r0.y, r0.x, c4.z
    dp2add_pp r0.x, r0.x, r0.z, -r0.y
    add_pp r0.x, r0.x, c4.w
    mul_pp r0.x, r5.x, r0.x
    mul_pp oC0, r0.x, r1

// approximately 50 instruction slots used (7 texture, 43 arithmetic)
