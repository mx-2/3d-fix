//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CamDir;
//   sampler2D DepthSampler;
//   float2 NearFar;
//   sampler2D NormalSampler;
//   float4 ScreenToTexCoord;
//   sampler2D ShadowMaskSampler;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   CamDir            c0       1
//   NearFar           c1       1
//   ScreenToTexCoord  c2       1
//   DepthSampler      s0       1
//   NormalSampler     s1       1
//   ShadowMaskSampler s2       1
//
//
// Default values:
//
//   CamDir
//     c0   = { 0, 0, 0, 0 };
//
//   NearFar
//     c1   = { 0, 0, 0, 0 };
//
//   ScreenToTexCoord
//     c2   = { 0, 0, 0, 0 };
//

// c220 = InverseViewProjection - from parent VS

// "Ambient" point lights - no specular
// similar fix as 92EAC913

    ps_3_0
    def c3, 3, 1, 2, -1
    def c4, 0.5, 0, 0, 0
def c200, -0.1, 230000, 0.0625, 1
    dcl_texcoord v0.xyz
    dcl_texcoord1 v1.xyz
    dcl_texcoord2_pp v2
    dcl vPos.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
dcl_2d s13

    nrm r0.xyz, v1
    dp3 r0.w, c0, r0
    rcp r0.w, r0.w
    mad r1.xy, vPos, c2, c2.zwzw
    texld r2, r1, s0					// sample screen depth to r2
    mul r1.z, r2.x, c1.y
mov r28.x, r1.z							// Store scaled depth
    mul r0.w, r0.w, r1.z
    //mad_pp r0.xyz, r0, -r0.w, v2		// Multiplying 3D coordinate by depth value and adding offset
										// Split that instruction in two:							
mul r20, r0, -r0.w						// r20 is in world coordiantes

// Pixel shader correction formula
texld r29, c200.z, s13
add r28.y, r28.x, -r29.y		// scaled_depth - convergence
mul r29.w, r28.y, r29.x			// (.) * separation

// Transform correction from screen to world coordinates
mul r30.x, r29.w, c220.x
mul r30.y, r29.w, c221.x
mul r30.z, r29.w, c222.x
//mul r30.w, r29.w, c223.x

// Apply correction
add r20.xyz, r20.xyz, r30.xyz
// 2nd half of split instruction:
add r0.xyz, r20, v2
										
    dp3_pp r0.w, r0, r0
    rsq_pp r0.w, r0.w
    mul_pp r0.xyz, r0.w, r0
    rcp_pp r0.w, r0.w
    mul_sat_pp r0.w, r0.w, v2.w
    texld_pp r2, r1, s1
    texld_pp r1, r1, s2
    mad_pp r1.yzw, r2.xxyz, c3.z, c3.w
    nrm_pp r2.xyz, r1.yzww
    dp3_pp r0.x, r0, r2
    mad_pp r0.x, r0.x, c4.x, c4.x
    mul_pp r0.y, r0.w, r0.w
    mul_pp r0.z, r0.y, c3.x
    dp2add_pp r0.y, r0.y, r0.w, -r0.z
    add_pp r0.y, r0.y, c3.y
    mul_pp r0.y, r1.x, r0.y
    mul_pp r0.x, r0.x, r0.y
    mul oC0.xyz, r0.x, v0
    mov oC0.w, c4.y

// approximately 32 instruction slots used (3 texture, 29 arithmetic)
