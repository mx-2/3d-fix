//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 EyePos;
//   float4x4 ViewProj;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   ViewProj     c0       4
//   EyePos       c4       1
//
//
// Default values:
//
//   ViewProj
//     c0   = { 0, 0, 0, 0 };
//     c1   = { 0, 0, 0, 0 };
//     c2   = { 0, 0, 0, 0 };
//     c3   = { 0, 0, 0, 0 };
//
//   EyePos
//     c4   = { 0, 0, 0, 0 }; <- this is a zero!
//

// c220 - InverseViewProj - from c0

// Point lights without shadows

    vs_3_0
	
// Helix sampler
dcl_2d s1
def c200, 10, 1, 0.0625, 1

    def c5, 1, 0, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3
    dcl_texcoord3 v4
    dcl_texcoord4 v5		// input light color, passed to PS
    
    dcl_position o0			// 3D position
    dcl_texcoord o1			// color
    dcl_texcoord1 o2.xyz	// Output position in world coordinates, responsible for jumping issue.
    dcl_texcoord2 o3
    dp3 r0.x, v0, v0
    rsq r0.x, r0.x
    rcp r0.y, r0.x
    mad r0.xzw, v0.xyyz, r0.x, -v0.xyyz
    slt r0.y, c5.x, r0.y
    mad r0.xyz, r0.y, r0.xzww, v0
    mul r0.xyz, r0, v4.x
    mov r0.w, v0.w
    dp4 r1.x, r0, v1
    dp4 r1.y, r0, v2
    dp4 r1.z, r0, v3
    mov r1.w, v0.w
    
    //dp4 o0.x, r1, c0
    //dp4 o0.y, r1, c1
    //dp4 o0.z, r1, c2
    //dp4 o0.w, r1, c3
    
// Transform r1 from world to screen space for output position.
// Put result into temporary register (for o2) and o0.
dp4 r20.x, r1, c0
dp4 r20.y, r1, c1
dp4 r20.z, r1, c2
dp4 r20.w, r1, c3
mov o0, r20

// Since o2 is related to r1, it needs the stereo correction too.
// Stereo correction must be applied in screen space.
texldl r30, c200.z, s1
add r30.w, r20.w, -r30.y
mad r20.x, r30.x, r30.w, r20.x

// Transform corrected r1 back to world space for o2.
// This finally fixes the jumping issue!
dp4 r21.x, r20, c220
dp4 r21.y, r20, c221
dp4 r21.z, r20, c222
//dp4 r21.w, r20, c223

// Removing c4 does not change anything.
add o2.xyz, r21, -c4

    //add o2.xyz, r1, -c4
    mov r0.x, v1.w
    mov r0.y, v2.w
    mov r0.z, v3.w

    add o3.xyz, r0, -c4
    rcp o3.w, v4.x
    mov o1, v5

// approximately 23 instruction slots used
