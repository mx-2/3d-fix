//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float2 TextureSize;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   TextureSize  c0       1
//
//
// Default values:
//
//   TextureSize
//     c0   = { 0, 0, 0, 0 };
//

//    preshader
//    rcp c5.x, c0.x
//    rcp c5.y, c0.y

// approximately 2 instructions used
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 EyePos;
//   float4x4 ViewProj;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   ViewProj     c0       4
//   EyePos       c4       1
//
//
// Default values:
//
//   ViewProj
//     c0   = { 0, 0, 0, 0 };
//     c1   = { 0, 0, 0, 0 };
//     c2   = { 0, 0, 0, 0 };
//     c3   = { 0, 0, 0, 0 };
//
//   EyePos
//     c4   = { 0, 0, 0, 0 };
//

// c210 - Inverse ViewProj

// Point lights

    vs_3_0
    def c6, 0.0500000007, 0.5, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_position o0
    dcl_texcoord o1.xyz		// color
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3
    dcl_texcoord3 o4
	
    add o3.xyz, -c4, v1
    mul r0.x, v1.w, v1.w
    mul o3.w, r0.x, c6.x
    mov r0, v1
    mad r0.xyz, v0, r0.w, r0
    //add o2.xyz, r0, -c4
    mov r0.w, v0.w
	
	// Transform r0 from world to screen space -> r1
    dp4 r1.x, r0, c0
    dp4 r1.w, r0, c3
    add r2.x, r1.w, r1.x
    mul r2.x, r2.x, c6.y
    dp4 r1.y, r0, c1
    dp4 r1.z, r0, c2
    add r0.x, r1.w, -r1.y
	mov o0, r1

// Transform r1 back to world space for o2.
// This finally fixes the jumping issue,
// even though there is no actual fix made here!
dp4 r30.x, r1, c210
dp4 r30.y, r1, c211
dp4 r30.z, r1, c212
add o2.xyz, r30, -c4		// c4 seems to be zero!
	
    mov o4.zw, r1
    mul r0.yz, r1.w, c5.xxyw
    mul r2.y, r0.x, c6.y
    mad o4.xy, r0.yzzw, c6.y, r2
    mov o1.xyz, v2

// approximately 20 instruction slots used
