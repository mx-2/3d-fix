//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float2 DizzerTextureSize;
//   float2 TextureSize;
//
//
// Registers:
//
//   Name              Reg   Size
//   ----------------- ----- ----
//   TextureSize       c0       1
//   DizzerTextureSize c1       1
//
//
// Default values:
//
//   TextureSize
//     c0   = { 0, 0, 0, 0 };
//
//   DizzerTextureSize
//     c1   = { 0, 0, 0, 0 };
//

//    preshader
//    rcp c4.x, c0.x
//    rcp c4.y, c0.y
//    rcp r0.x, c1.x
//    rcp r0.y, c1.y
//    mul c5.xy, r0.xy, c0.xy

// approximately 5 instructions used
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 EyePos;
//   float4x4 ViewProj;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   ViewProj     c0       4
//   EyePos       c6       1
//
//
// Default values:
//
//   ViewProj
//     c0   = { 0, 0, 0, 0 };
//     c1   = { 0, 0, 0, 0 };
//     c2   = { 0, 0, 0, 0 };
//     c3   = { 0, 0, 0, 0 };
//
//   EyePos
//     c6   = { 0, 0, 0, 0 };
//

// c210 - Inverse ViewProj

// Point lights with shadows

    vs_3_0
    def c7, 0.0500000007, 0.5, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3
    dcl_texcoord3 v4
    dcl_texcoord4 v5
    dcl_texcoord5 v6
    dcl_blendweight v7
    dcl_blendweight1 v8
    dcl_blendweight2 v9
    dcl_blendweight3 v10
    dcl_position o0
    dcl_texcoord o1.xyz
    dcl_texcoord1 o2
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4
    dcl_texcoord4 o5
    dcl_texcoord5 o6.xy
    dcl_texcoord6 o7
    dcl_texcoord7 o8
    dcl_texcoord8 o9
    dcl_texcoord9 o10
	
    mov r0.x, v1.w
    mov r0.y, v2.w
    mov r0.z, v3.w
    add o4.xyz, r0, -c6
    mul r0.x, v4.x, v4.x
    mul o4.w, r0.x, c7.x
    mov r0, v0
    mul r0.xyz, r0, v4.x
	
    dp4 r1.x, r0, v1
    dp4 r1.y, r0, v2
    dp4 r1.z, r0, v3
    //add o3.xyz, r1, -c6
    mov r1.w, v0.w
	
    dp4 r0.x, r1, c0
    dp4 r0.w, r1, c3
    add r2.x, r0.w, r0.x
    mul r2.x, r2.x, c7.y
    dp4 r0.y, r1, c1
    dp4 r0.z, r1, c2
    add r1.x, r0.w, -r0.y
    mov o0, r0
	
// Transform r0 back to world space for o3.
// This finally fixes the jumping issue,
// even though there is no actual fix made here!
dp4 r30.x, r0, c210
dp4 r30.y, r0, c211
dp4 r30.z, r0, c212
add o3.xyz, r30, -c6
	
    mul r0.xy, r0.w, c4
    mul r2.y, r1.x, c7.y
    mad r0.xy, r0, c7.y, r2
    mul o6.xy, r0, c5
    mov o5, r0
    mov o1.xyz, v5
    mov o2, v6
    mov o7, v7
    mov o8, v8
    mov o9, v9
    mov o10, v10

// approximately 32 instruction slots used
