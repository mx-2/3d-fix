//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CamDir;
//   sampler2D DepthTexture_ss;
//   float DizzerKernelSize;
//   sampler2D DizzerTexture_ss;
//   sampler2D GBuffer1Texture_ss;
//   sampler2D GBuffer2Texture_ss;
//   float2 NearFar;
//   sampler2D ShadowTexture_ss;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   CamDir             c0       1
//   NearFar            c1       1
//   DizzerKernelSize   c2       1
//   DepthTexture_ss    s0       1
//   GBuffer1Texture_ss s1       1
//   GBuffer2Texture_ss s2       1
//   DizzerTexture_ss   s3       1
//   ShadowTexture_ss   s4       1
//
//
// Default values:
//
//   CamDir
//     c0   = { 0, 0, 0, 0 };
//
//   NearFar
//     c1   = { 0, 0, 0, 0 };
//
//   DizzerKernelSize
//     c2   = { 0.01, 0, 0, 0 };
//

// c210 - Inverse ViewProj - from parent VS
// c214 - ViewProj

// Point lights with shadows - fires

    ps_3_0
def c200, 1, 0, 0.0625, 0
dcl_2d s13
    def c3, 1, 2, -1, 0
    def c4, 13, 1, 0.600000024, 0.125
    def c5, -0.0500000007, -10, 0.25, 0.125
    dcl_texcoord v0.xyz
    dcl_texcoord1 v1
    dcl_texcoord2 v2.xyz
    dcl_texcoord3_pp v3
    dcl_texcoord4 v4
    dcl_texcoord5_pp v5.xy
    dcl_texcoord6 v6
    dcl_texcoord7 v7
    dcl_texcoord8 v8
    dcl_texcoord9 v9
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    dcl_2d s4
	
    rcp r0.x, v4.w
    mul r0.xy, r0.x, v4
    texld r0, r0, s0				// sample depth
    mul r0.x, r0.x, c1.y			// scale depth
    nrm_pp r1.xyz, v2
    dp3 r0.y, c0, r1
    rcp r0.y, r0.y
    mul r0.x, r0.y, r0.x			// scale depth
    mul r2.xyz, r0.x, r1			// r2 determines clipping planes
    								// r2 is r1 multiplied with scaled depth
    								// -> fix r1 and r2
									
// World space correction for shadows:
mov r29.xyz, r2
mov r29.w, c200.y

// ViewProjection
dp4 r30.x, c214, r29
dp4 r30.y, c215, r29
dp4 r30.z, c216, r29
dp4 r30.w, c217, r29

// Now r30.w is proportional to depth.

// Subtract stereo correction
texldl r31, c200.z, s13
add r31.w, r30.w, -r31.y
mad r30.x, -r31.w, r31.x, r30.x

// Inverse ViewProjection - this fixes seams
dp4 r2.x, c210, r30
dp4 r2.y, c211, r30
dp4 r2.z, c212, r30

// Go back and fix r1 as well as it is used throughout the rest of the shader
// for light placement:
rcp r30.w, r0.x
mul r20.xyz, r30.w, r2		// Divide by depth because r2 = r1 * depth
nrm r1, r20					// Renormalize after this characteristic mad to fix specular
mad_pp r0.xyz, r20, -r0.x, v3

    //mad_pp r0.xyz, r1, -r0.x, v3
    mov r2.w, c3.x	
    dp4 r3.x, r2, v6
    dp4 r3.y, r2, v7
    dp4 r0.w, r2, v9
    dp4 r3.z, r2, v8
    add r2, r0.w, -r3_abs.xyzz
    rcp r0.w, r0.w
    texkill r2
	
    mul r2.xy, r0.w, r3
    mad r2, r2.xyxy, v1.xyxy, v1.zwzw
    texld_pp r4, v5, s3
    mad r4, r4, c3.y, c3.z
    mad r5, r4.xzyz, c2.x, r2.zwzw
    texld_pp r6, r5, s4
    texld_pp r5, r5.zwzw, s4
    mov_pp r6.y, r5.x
    mad r5, r4.ywzw, c2.x, r2.zwzw
    texld_pp r7, r5, s4
    texld_pp r5, r5.zwzw, s4
    mov_pp r6.w, r5.x
    mov_pp r6.z, r7.x
    mad r5, r3.z, r0.w, -r6
    cmp_pp r5, r5, c3.w, c3.x
    dp4_pp r1.w, r5, c4.w
    mad r5, r4.zxwx, c2.x, r2.zwzw
    mad r2, r4.wywz, c2.x, r2
    texld_pp r4, r5, s4
    texld_pp r5, r5.zwzw, s4
    mov_pp r4.y, r5.x
    texld_pp r5, r2, s4
    texld_pp r2, r2.zwzw, s4
    mov_pp r4.w, r2.x
    mov_pp r4.z, r5.x
    mad r2, r3.z, r0.w, -r4
    cmp_pp r2, r2, c3.w, c3.x
    dp4_pp r0.w, r2, c4.w
    add_pp r0.w, r0.w, r1.w
    dp3_pp r1.w, r0, r0
    rcp_pp r2.x, r1.w
    rsq r1.w, r1.w
    mad_sat_pp r2.x, r2.x, v3.w, c5.x
    mul_pp r0.w, r0.w, r2.x
    mul_pp r2.xyz, r0.w, v0
    mul_pp r3.xyz, r0, r1.w
    mad_pp r0.xyz, r0, r1.w, -r1
    nrm_pp r4.xyz, r0
    texldp_pp r0, v4, s1
    mad_pp r0.xyz, r0, c3.y, c3.z
    cmp_pp r0.w, -r0.z, c3.w, c3.x
    cmp_pp r1.w, r0.z, -c3.w, -c3.x
    add_pp r0.w, r0.w, r1.w
    dp2add_pp r1.w, r0, r0, c3.w
    add_pp r5.xy, r1.w, c3.xzzw
    mul_pp r0.w, r0.w, r5.y
    rcp r1.w, r5.x
    add_pp r0.xy, r0, r0
    mul r0.z, r0_abs.z, c4.x
    exp_pp r0.z, r0.z
    mul_pp r5.xyz, r0.xyww, r1.w
    dp3_sat_pp r0.x, r3, r5
    dp3_sat_pp r0.y, r4, r5
    dp3_sat_pp r0.w, r4, -r1
    mul r0.w, r0.w, c5.y
    exp r0.w, r0.w
    pow_pp r1.x, r0.y, r0.z
    mad_pp r0.y, r0.z, c5.z, c5.w
    mul_pp r1.yzw, r0.x, r2.xxyz
    texldp_pp r2, v4, s2
    add r0.xz, -r2.w, c4.yyzw
    cmp_pp r3.xyz, r0.z, c3.x, r2
    mul_pp r4.xyz, r2.w, r3
    mad_pp r3.xyz, r2.w, -r3, c3.x
    mul_pp r2.xyz, r1.yzww, r2
    mul_pp r2.xyz, r0.x, r2
    mad r0.xzw, r3.xyyz, r0.w, r4.xyyz
    mul_pp r0.xzw, r0, r1.yyzw
    mul_pp r0.xzw, r1.x, r0
    mad_pp oC0.xyz, r0.xzww, r0.y, r2
    mov_pp oC0.w, c3.w

// approximately 96 instruction slots used (12 texture, 84 arithmetic)
