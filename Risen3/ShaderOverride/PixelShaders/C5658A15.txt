//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   float3 CamDir;
//   sampler2D DepthTexture_ss;
//   sampler2D GBuffer1Texture_ss;
//   sampler2D GBuffer2Texture_ss;
//   float2 NearFar;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   CamDir             c0       1
//   NearFar            c1       1
//   DepthTexture_ss    s0       1
//   GBuffer1Texture_ss s1       1
//   GBuffer2Texture_ss s2       1
//
//
// Default values:
//
//   CamDir
//     c0   = { 0, 0, 0, 0 };
//
//   NearFar
//     c1   = { 0, 0, 0, 0 };
//

// c210 - Inverse ViewProj - from parent VS
// c214 - ViewProj

// Point lights with shadows - with flies in it

    ps_3_0
def c200, 1, 0, 0.0625, 0
dcl_2d s13
    def c2, 1, 2, -1, 0
    def c3, 13, 1, 0.600000024, -0.0500000007
    def c4, -10, 0.25, 0.125, 0
    dcl_texcoord v0.xyz
    dcl_texcoord2 v1.xyz
    dcl_texcoord3_pp v2
    dcl_texcoord4 v3
    dcl_texcoord6 v4
    dcl_texcoord7 v5
    dcl_texcoord8 v6
    dcl_texcoord9 v7
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
	
    rcp r0.x, v3.w
    mul r0.xy, r0.x, v3
    texld r0, r0, s0		// Sample depth
    mul r0.x, r0.x, c1.y	// Scale depth
    nrm_pp r1.xyz, v1
    dp3 r0.y, c0, r1
    rcp r0.y, r0.y
    mul r0.x, r0.y, r0.x	// Scale depth
    mul r2.xyz, r0.x, r1	// r2 determines clipping planes
    						// r2 is r1 multiplied with scaled depth
    						// -> fix r1 and r2
							
// World space correction for shadows:
mov r29.xyz, r2
mov r29.w, c200.y

// ViewProjection
dp4 r30.x, c214, r29
dp4 r30.y, c215, r29
dp4 r30.z, c216, r29
dp4 r30.w, c217, r29

// Now r30.w is proportional to depth.

// Subtract stereo correction
texldl r31, c200.z, s13
add r31.w, r30.w, -r31.y
mad r30.x, -r31.w, r31.x, r30.x

// Inverse ViewProjection - this fixes seams
dp4 r2.x, c210, r30
dp4 r2.y, c211, r30
dp4 r2.z, c212, r30

// Go back and fix r1 as well as it is used throughout the rest of the shader
// for light placement:
rcp r30.w, r0.x
mul r20.xyz, r30.w, r2		// Divide by depth because r2 = r1 * depth
nrm r1, r20					// Renormalize after this characteristic mad to fix specular
mad_pp r0.xyz, r20, -r0.x, v2
	
    //mad_pp r0.xyz, r1, -r0.x, v2
    mov r2.w, c2.x
    dp4 r3.x, r2, v4
    dp4 r3.y, r2, v5
    dp4 r3.z, r2, v6
    dp4 r0.w, r2, v7
    add r2, -r3_abs.xyzz, r0.w
    texkill r2
    dp3_pp r0.w, r0, r0
    rsq r1.w, r0.w
    rcp_pp r0.w, r0.w
    mad_sat_pp r0.w, r0.w, v2.w, c3.w
    mul_pp r2.xyz, r0.w, v0
    mad_pp r3.xyz, r0, r1.w, -r1
    mul_pp r0.xyz, r0, r1.w
    nrm_pp r4.xyz, r3
    dp3_sat_pp r0.w, r4, -r1
    mul r0.w, r0.w, c4.x
    exp r0.w, r0.w
    texldp_pp r1, v3, s2
    add r3.xy, -r1.w, c3.yzzw
    cmp_pp r3.yzw, r3.y, c2.x, r1.xxyz
    mul_pp r5.xyz, r1.w, r3.yzww
    mad_pp r3.yzw, r1.w, -r3, c2.x
    mad r3.yzw, r3, r0.w, r5.xxyz
    texldp_pp r5, v3, s1
    mad_pp r5.xyz, r5, c2.y, c2.z
    cmp_pp r0.w, -r5.z, c2.w, c2.x
    cmp_pp r1.w, r5.z, -c2.w, -c2.x
    add_pp r0.w, r0.w, r1.w
    dp2add_pp r1.w, r5, r5, c2.w
    add_pp r6.xy, r1.w, c2.xzzw
    mul_pp r0.w, r0.w, r6.y
    rcp r1.w, r6.x
    mul_pp r6.z, r0.w, r1.w
    add_pp r5.xy, r5, r5
    mul r0.w, r5_abs.z, c3.x
    exp_pp r0.w, r0.w
    mul_pp r6.xy, r1.w, r5
    dp3_sat_pp r0.x, r0, r6
    dp3_sat_pp r0.y, r4, r6
    pow_pp r1.w, r0.y, r0.w
    mad_pp r0.y, r0.w, c4.y, c4.z
    mul_pp r0.xzw, r0.x, r2.xyyz
    mul_pp r2.xyz, r3.yzww, r0.xzww
    mul_pp r0.xzw, r1.xyyz, r0
    mul_pp r0.xzw, r3.x, r0
    mul_pp r1.xyz, r1.w, r2
    mad_pp oC0.xyz, r1, r0.y, r0.xzww
    mov_pp oC0.w, c2.w

// approximately 66 instruction slots used (3 texture, 63 arithmetic)
